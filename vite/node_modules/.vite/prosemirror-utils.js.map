{
  "version": 3,
  "sources": ["../../../node_modules/prosemirror-utils/src/transforms.js", "../../../node_modules/prosemirror-utils/src/helpers.js", "../../../node_modules/prosemirror-utils/src/selection.js", "../../../node_modules/prosemirror-utils/src/node.js", "../../../node_modules/prosemirror-utils/src/table.js", "dep:prosemirror-utils"],
  "sourcesContent": ["import { NodeSelection, Selection } from 'prosemirror-state';\nimport { Fragment } from 'prosemirror-model';\nimport { findParentNodeOfType, findPositionOfNodeBefore } from './selection';\nimport {\n  cloneTr,\n  isNodeSelection,\n  replaceNodeAtPos,\n  removeNodeAtPos,\n  canInsert,\n  isEmptyParagraph\n} from './helpers';\n\n// :: (nodeType: union<NodeType, [NodeType]>) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that removes a node of a given `nodeType`. It will return an original transaction if parent node hasn't been found.\n//\n// ```javascript\n// dispatch(\n//   removeParentNodeOfType(schema.nodes.table)(tr)\n// );\n// ```\nexport const removeParentNodeOfType = nodeType => tr => {\n  const parent = findParentNodeOfType(nodeType)(tr.selection);\n  if (parent) {\n    return removeNodeAtPos(parent.pos)(tr);\n  }\n  return tr;\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>, content: union<ProseMirrorNode, Fragment>) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that replaces parent node of a given `nodeType` with the given `content`. It will return an original transaction if either parent node hasn't been found or replacing is not possible.\n//\n// ```javascript\n// const node = schema.nodes.paragraph.createChecked({}, schema.text('new'));\n//\n// dispatch(\n//  replaceParentNodeOfType(schema.nodes.table, node)(tr)\n// );\n// ```\nexport const replaceParentNodeOfType = (nodeType, content) => tr => {\n  if (!Array.isArray(nodeType)) {\n    nodeType = [nodeType];\n  }\n  for (let i = 0, count = nodeType.length; i < count; i++) {\n    const parent = findParentNodeOfType(nodeType[i])(tr.selection);\n    if (parent) {\n      const newTr = replaceNodeAtPos(parent.pos, content)(tr);\n      if (newTr !== tr) {\n        return newTr;\n      }\n    }\n  }\n  return tr;\n};\n\n// :: (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that removes selected node. It will return an original transaction if current selection is not a `NodeSelection`.\n//\n// ```javascript\n// dispatch(\n//   removeSelectedNode(tr)\n// );\n// ```\nexport const removeSelectedNode = tr => {\n  if (isNodeSelection(tr.selection)) {\n    const from = tr.selection.$from.pos;\n    const to = tr.selection.$to.pos;\n    return cloneTr(tr.delete(from, to));\n  }\n  return tr;\n};\n\n// :: (content: union<ProseMirrorNode, ProseMirrorFragment>) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that replaces selected node with a given `node`, keeping NodeSelection on the new `node`.\n// It will return the original transaction if either current selection is not a NodeSelection or replacing is not possible.\n//\n// ```javascript\n// const node = schema.nodes.paragraph.createChecked({}, schema.text('new'));\n// dispatch(\n//   replaceSelectedNode(node)(tr)\n// );\n// ```\nexport const replaceSelectedNode = content => tr => {\n  if (isNodeSelection(tr.selection)) {\n    const { $from, $to } = tr.selection;\n    if (\n      (content instanceof Fragment &&\n        $from.parent.canReplace($from.index(), $from.indexAfter(), content)) ||\n      $from.parent.canReplaceWith(\n        $from.index(),\n        $from.indexAfter(),\n        content.type\n      )\n    ) {\n      return cloneTr(\n        tr\n          .replaceWith($from.pos, $to.pos, content)\n          // restore node selection\n          .setSelection(new NodeSelection(tr.doc.resolve($from.pos)))\n      );\n    }\n  }\n  return tr;\n};\n\n// :: (position: number, dir: ?number) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that tries to find a valid cursor selection starting at the given `position`\n// and searching back if `dir` is negative, and forward if positive.\n// If a valid cursor position hasn't been found, it will return the original transaction.\n//\n// ```javascript\n// dispatch(\n//   setTextSelection(5)(tr)\n// );\n// ```\nexport const setTextSelection = (position, dir = 1) => tr => {\n  const nextSelection = Selection.findFrom(tr.doc.resolve(position), dir, true);\n  if (nextSelection) {\n    return tr.setSelection(nextSelection);\n  }\n  return tr;\n};\n\nconst isSelectableNode = node => node.type && node.type.spec.selectable;\nconst shouldSelectNode = node => isSelectableNode(node) && node.type.isLeaf;\n\nconst setSelection = (node, pos, tr) => {\n  if (shouldSelectNode(node)) {\n    return tr.setSelection(new NodeSelection(tr.doc.resolve(pos)));\n  }\n  return setTextSelection(pos)(tr);\n};\n\n// :: (content: union<ProseMirrorNode, Fragment>, position: ?number, tryToReplace?: boolean) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that inserts a given `content` at the current cursor position, or at a given `position`, if it is allowed by schema. If schema restricts such nesting, it will try to find an appropriate place for a given node in the document, looping through parent nodes up until the root document node.\n// If `tryToReplace` is true and current selection is a NodeSelection, it will replace selected node with inserted content if its allowed by schema.\n// If cursor is inside of an empty paragraph, it will try to replace that paragraph with the given content. If insertion is successful and inserted node has content, it will set cursor inside of that content.\n// It will return an original transaction if the place for insertion hasn't been found.\n//\n// ```javascript\n// const node = schema.nodes.extension.createChecked({});\n// dispatch(\n//   safeInsert(node)(tr)\n// );\n// ```\nexport const safeInsert = (content, position, tryToReplace) => tr => {\n  const hasPosition = typeof position === 'number';\n  const { $from } = tr.selection;\n  const $insertPos = hasPosition\n    ? tr.doc.resolve(position)\n    : isNodeSelection(tr.selection)\n    ? tr.doc.resolve($from.pos + 1)\n    : $from;\n  const { parent } = $insertPos;\n\n  // try to replace selected node\n  if (isNodeSelection(tr.selection) && tryToReplace) {\n    const oldTr = tr;\n    tr = replaceSelectedNode(content)(tr);\n    if (oldTr !== tr) {\n      return tr;\n    }\n  }\n\n  // try to replace an empty paragraph\n  if (isEmptyParagraph(parent)) {\n    const oldTr = tr;\n    tr = replaceParentNodeOfType(parent.type, content)(tr);\n    if (oldTr !== tr) {\n      const pos = isSelectableNode(content)\n        ? // for selectable node, selection position would be the position of the replaced parent\n          $insertPos.before($insertPos.depth)\n        : $insertPos.pos;\n      return setSelection(content, pos, tr);\n    }\n  }\n\n  // given node is allowed at the current cursor position\n  if (canInsert($insertPos, content)) {\n    tr.insert($insertPos.pos, content);\n    const pos = hasPosition\n      ? $insertPos.pos\n      : isSelectableNode(content)\n      ? // for atom nodes selection position after insertion is the previous pos\n        tr.selection.$anchor.pos - 1\n      : tr.selection.$anchor.pos;\n    return cloneTr(setSelection(content, pos, tr));\n  }\n\n  // looking for a place in the doc where the node is allowed\n  for (let i = $insertPos.depth; i > 0; i--) {\n    const pos = $insertPos.after(i);\n    const $pos = tr.doc.resolve(pos);\n    if (canInsert($pos, content)) {\n      tr.insert(pos, content);\n      return cloneTr(setSelection(content, pos, tr));\n    }\n  }\n  return tr;\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>, type: ?union<NodeType, null>, attrs: ?union<Object, null>, marks?: [Mark]) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a transaction that changes the type, attributes, and/or marks of the parent node of a given `nodeType`.\n//\n// ```javascript\n// const node = schema.nodes.extension.createChecked({});\n// dispatch(\n//   setParentNodeMarkup(schema.nodes.panel, null, { panelType })(tr);\n// );\n// ```\nexport const setParentNodeMarkup = (nodeType, type, attrs, marks) => tr => {\n  const parent = findParentNodeOfType(nodeType)(tr.selection);\n  if (parent) {\n    return cloneTr(\n      tr.setNodeMarkup(\n        parent.pos,\n        type,\n        Object.assign({}, parent.node.attrs, attrs),\n        marks\n      )\n    );\n  }\n  return tr;\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that sets a `NodeSelection` on a parent node of a `given\u00A0nodeType`.\n//\n// ```javascript\n// dispatch(\n//   selectParentNodeOfType([tableCell, tableHeader])(state.tr)\n// );\n// ```\nexport const selectParentNodeOfType = nodeType => tr => {\n  if (!isNodeSelection(tr.selection)) {\n    const parent = findParentNodeOfType(nodeType)(tr.selection);\n    if (parent) {\n      return cloneTr(tr.setSelection(NodeSelection.create(tr.doc, parent.pos)));\n    }\n  }\n  return tr;\n};\n\n// :: (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that deletes previous node.\n//\n// ```javascript\n// dispatch(\n//   removeNodeBefore(state.tr)\n// );\n// ```\nexport const removeNodeBefore = tr => {\n  const position = findPositionOfNodeBefore(tr.selection);\n  if (typeof position === 'number') {\n    return removeNodeAtPos(position)(tr);\n  }\n  return tr;\n};\n", "import { NodeSelection } from 'prosemirror-state';\nimport { Fragment, Node as PMNode } from 'prosemirror-model';\nimport { TableMap } from 'prosemirror-tables';\nimport { setTextSelection } from './transforms';\nimport { findParentNodeClosestToPos } from './selection';\n\n// :: (selection: Selection) \u2192 boolean\n// Checks if current selection is a `NodeSelection`.\n//\n// ```javascript\n// if (isNodeSelection(tr.selection)) {\n//   // ...\n// }\n// ```\nexport const isNodeSelection = selection => {\n  return selection instanceof NodeSelection;\n};\n\n// (nodeType: union<NodeType, [NodeType]>) \u2192 boolean\n// Checks if the type a given `node` equals to a given `nodeType`.\nexport const equalNodeType = (nodeType, node) => {\n  return (\n    (Array.isArray(nodeType) && nodeType.indexOf(node.type) > -1) ||\n    node.type === nodeType\n  );\n};\n\n// (tr: Transaction) \u2192 Transaction\n// Creates a new transaction object from a given transaction\nexport const cloneTr = tr => {\n  return Object.assign(Object.create(tr), tr).setTime(Date.now());\n};\n\n// (position: number, content: union<ProseMirrorNode, Fragment>) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a `replace` transaction that replaces a node at a given position with the given `content`.\n// It will return the original transaction if replacing is not possible.\n// `position` should point at the position immediately before the node.\nexport const replaceNodeAtPos = (position, content) => tr => {\n  const node = tr.doc.nodeAt(position);\n  const $pos = tr.doc.resolve(position);\n  if (canReplace($pos, content)) {\n    tr = tr.replaceWith(position, position + node.nodeSize, content);\n    const start = tr.selection.$from.pos - 1;\n    // put cursor inside of the inserted node\n    tr = setTextSelection(Math.max(start, 0), -1)(tr);\n    // move cursor to the start of the node\n    tr = setTextSelection(tr.selection.$from.start())(tr);\n    return cloneTr(tr);\n  }\n  return tr;\n};\n\n// ($pos: ResolvedPos, doc: ProseMirrorNode, content: union<ProseMirrorNode, Fragment>, ) \u2192 boolean\n// Checks if replacing a node at a given `$pos` inside of the `doc` node with the given `content` is possible.\nexport const canReplace = ($pos, content) => {\n  const node = $pos.node($pos.depth);\n  return (\n    node &&\n    node.type.validContent(\n      content instanceof Fragment ? content : Fragment.from(content)\n    )\n  );\n};\n\n// (position: number) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a `delete` transaction that removes a node at a given position with the given `node`.\n// `position` should point at the position immediately before the node.\nexport const removeNodeAtPos = position => tr => {\n  const node = tr.doc.nodeAt(position);\n  return cloneTr(tr.delete(position, position + node.nodeSize));\n};\n\n// (schema: Schema) \u2192 {[key: string]: NodeType}\n// Returns a map where keys are tableRoles and values are NodeTypes.\nexport const tableNodeTypes = schema => {\n  if (schema.cached.tableNodeTypes) {\n    return schema.cached.tableNodeTypes;\n  }\n  const roles = {};\n  Object.keys(schema.nodes).forEach(type => {\n    const nodeType = schema.nodes[type];\n    if (nodeType.spec.tableRole) {\n      roles[nodeType.spec.tableRole] = nodeType;\n    }\n  });\n  schema.cached.tableNodeTypes = roles;\n  return roles;\n};\n\n// :: ($pos: ResolvedPos, content: union<ProseMirrorNode, Fragment>) \u2192 boolean\n// Checks if a given `content` can be inserted at the given `$pos`\n//\n// ```javascript\n// const { selection: { $from } } = state;\n// const node = state.schema.nodes.atom.createChecked();\n// if (canInsert($from, node)) {\n//   // ...\n// }\n// ```\nexport const canInsert = ($pos, content) => {\n  const index = $pos.index();\n\n  if (content instanceof Fragment) {\n    return $pos.parent.canReplace(index, index, content);\n  } else if (content instanceof PMNode) {\n    return $pos.parent.canReplaceWith(index, index, content.type);\n  }\n  return false;\n};\n\n// (node: ProseMirrorNode) \u2192 boolean\n// Checks if a given `node` is an empty paragraph\nexport const isEmptyParagraph = node => {\n  return !node || (node.type.name === 'paragraph' && node.nodeSize === 2);\n};\n\n// ($pos: ResolvedPos) \u2192 ?{pos: number, start: number, node: ProseMirrorNode}\n// Iterates over parent nodes, returning a table node closest to a given `$pos`.\n//\n// ```javascript\n// const table = findTableClosestToPos(state.doc.resolve(10));\n// ```\nexport const findTableClosestToPos = $pos => {\n  const predicate = node =>\n    node.type.spec.tableRole && /table/i.test(node.type.spec.tableRole);\n  return findParentNodeClosestToPos($pos, predicate);\n};\n\nexport const createCell = (cellType, cellContent = null) => {\n  if (cellContent) {\n    return cellType.createChecked(null, cellContent);\n  }\n\n  return cellType.createAndFill();\n};\n\n// (rect: {left: number, right: number, top: number, bottom: number}) \u2192 (selection: Selection) \u2192 boolean\n// Checks if a given CellSelection rect is selected\nexport const isRectSelected = rect => selection => {\n  const map = TableMap.get(selection.$anchorCell.node(-1));\n  const start = selection.$anchorCell.start(-1);\n  const cells = map.cellsInRect(rect);\n  const selectedCells = map.cellsInRect(\n    map.rectBetween(\n      selection.$anchorCell.pos - start,\n      selection.$headCell.pos - start\n    )\n  );\n\n  for (let i = 0, count = cells.length; i < count; i++) {\n    if (selectedCells.indexOf(cells[i]) === -1) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n// This function transposes an array of array flipping the columns for rows,\n// transposition is a familiar algebra concept;\n// you can get more details here:\n// https://en.wikipedia.org/wiki/Transpose\n//\n// ```javascript\n//\n//  const arr = [\n//    ['a1', 'a2', 'a3'],\n//    ['b1', 'b2', 'b3'],\n//    ['c1', 'c2', 'c3'],\n//    ['d1', 'd2', 'd3'],\n//  ];\n//\n//  const result = transpose(arr);\n//\n//  result === [\n//    ['a1', 'b1', 'c1', 'd1'],\n//    ['a2', 'b2', 'c2', 'd2'],\n//    ['a3', 'b3', 'c3', 'd3'],\n//  ]\n// ```\nexport const transpose = array => {\n  return array[0].map((_, i) => {\n    return array.map(column => column[i]);\n  });\n};\n\n// :: (tableNode: Node) -> Array<Node>\n// This function will transform the table node\n// into a matrix of rows and columns respecting merged cells,\n// for example this table will be convert to the below:\n//\n// ```\n//  ____________________________\n// |      |      |             |\n// |  A1  |  B1  |     C1      |\n// |______|______|______ ______|\n// |      |             |      |\n// |  A2  |     B2      |      |\n// |______|______ ______|      |\n// |      |      |      |  D1  |\n// |  A3  |  B3  |  C2  |      |\n// |______|______|______|______|\n// ```\n//\n//\n// ```javascript\n// array = [\n//   [A1, B1, C1, null],\n//   [A2, B2, null, D1],\n//   [A3. B3, C2, null],\n// ]\n// ```\nexport const convertTableNodeToArrayOfRows = tableNode => {\n  const map = TableMap.get(tableNode);\n  const rows = [];\n  for (let rowIndex = 0; rowIndex < map.height; rowIndex++) {\n    const rowCells = [];\n    const seen = {};\n\n    for (let colIndex = 0; colIndex < map.width; colIndex++) {\n      const cellPos = map.map[rowIndex * map.width + colIndex];\n      const cell = tableNode.nodeAt(cellPos);\n      const rect = map.findCell(cellPos);\n      if (seen[cellPos] || rect.top !== rowIndex) {\n        rowCells.push(null);\n        continue;\n      }\n      seen[cellPos] = true;\n\n      rowCells.push(cell);\n    }\n\n    rows.push(rowCells);\n  }\n\n  return rows;\n};\n\n// :: (tableNode: Node, tableArray: Array<Node>) -> Node\n// This function will transform a matrix of nodes\n// into table node respecting merged cells and rows configurations,\n// for example this array will be convert to the table below:\n//\n// ```javascript\n// array = [\n//   [A1, B1, C1, null],\n//   [A2, B2, null, D1],\n//   [A3. B3, C2, null],\n// ]\n// ```\n//\n// ```\n//  ____________________________\n// |      |      |             |\n// |  A1  |  B1  |     C1      |\n// |______|______|______ ______|\n// |      |             |      |\n// |  A2  |     B2      |      |\n// |______|______ ______|      |\n// |      |      |      |  D1  |\n// |  A3  |  B3  |  C2  |      |\n// |______|______|______|______|\n// ```\n//\nexport const convertArrayOfRowsToTableNode = (tableNode, arrayOfNodes) => {\n  const rowsPM = [];\n  const map = TableMap.get(tableNode);\n  for (let rowIndex = 0; rowIndex < map.height; rowIndex++) {\n    const row = tableNode.child(rowIndex);\n    const rowCells = [];\n\n    for (let colIndex = 0; colIndex < map.width; colIndex++) {\n      if (!arrayOfNodes[rowIndex][colIndex]) {\n        continue;\n      }\n      const cellPos = map.map[rowIndex * map.width + colIndex];\n\n      const cell = arrayOfNodes[rowIndex][colIndex];\n      const oldCell = tableNode.nodeAt(cellPos);\n      const newCell = oldCell.type.createChecked(\n        Object.assign({}, cell.attrs),\n        cell.content,\n        cell.marks\n      );\n      rowCells.push(newCell);\n    }\n\n    rowsPM.push(row.type.createChecked(row.attrs, rowCells, row.marks));\n  }\n\n  const newTable = tableNode.type.createChecked(\n    tableNode.attrs,\n    rowsPM,\n    tableNode.marks\n  );\n\n  return newTable;\n};\n\nexport const moveTableColumn = (\n  table,\n  indexesOrigin,\n  indexesTarget,\n  direction\n) => {\n  let rows = transpose(convertTableNodeToArrayOfRows(table.node));\n\n  rows = moveRowInArrayOfRows(rows, indexesOrigin, indexesTarget, direction);\n  rows = transpose(rows);\n\n  return convertArrayOfRowsToTableNode(table.node, rows);\n};\n\nexport const moveTableRow = (\n  table,\n  indexesOrigin,\n  indexesTarget,\n  direction\n) => {\n  let rows = convertTableNodeToArrayOfRows(table.node);\n\n  rows = moveRowInArrayOfRows(rows, indexesOrigin, indexesTarget, direction);\n\n  return convertArrayOfRowsToTableNode(table.node, rows);\n};\n\nconst moveRowInArrayOfRows = (\n  rows,\n  indexesOrigin,\n  indexesTarget,\n  directionOverride\n) => {\n  let direction = indexesOrigin[0] > indexesTarget[0] ? -1 : 1;\n\n  const rowsExtracted = rows.splice(indexesOrigin[0], indexesOrigin.length);\n  const positionOffset = rowsExtracted.length % 2 === 0 ? 1 : 0;\n  let target;\n\n  if (directionOverride === -1 && direction === 1) {\n    target = indexesTarget[0] - 1;\n  } else if (directionOverride === 1 && direction === -1) {\n    target = indexesTarget[indexesTarget.length - 1] - positionOffset + 1;\n  } else {\n    target =\n      direction === -1\n        ? indexesTarget[0]\n        : indexesTarget[indexesTarget.length - 1] - positionOffset;\n  }\n\n  rows.splice.apply(rows, [target, 0].concat(rowsExtracted));\n  return rows;\n};\n\nexport const checkInvalidMovements = (\n  originIndex,\n  targetIndex,\n  targets,\n  type\n) => {\n  const direction = originIndex > targetIndex ? -1 : 1;\n  const errorMessage = `Target position is invalid, you can't move the ${type} ${originIndex} to ${targetIndex}, the target can't be split. You could use tryToFit option.`;\n\n  if (direction === 1) {\n    if (targets.slice(0, targets.length - 1).indexOf(targetIndex) !== -1) {\n      throw new Error(errorMessage);\n    }\n  } else {\n    if (targets.slice(1).indexOf(targetIndex) !== -1) {\n      throw new Error(errorMessage);\n    }\n  }\n\n  return true;\n};\n", "import { Selection } from 'prosemirror-state';\nimport { equalNodeType, isNodeSelection } from './helpers';\n\n// :: (predicate: (node: ProseMirrorNode) \u2192 boolean) \u2192 (selection: Selection) \u2192 ?{pos: number, start: number, depth: number, node: ProseMirrorNode}\n// Iterates over parent nodes, returning the closest node and its start position `predicate` returns truthy for. `start` points to the start position of the node, `pos` points directly before the node.\n//\n// ```javascript\n// const predicate = node => node.type === schema.nodes.blockquote;\n// const parent = findParentNode(predicate)(selection);\n// ```\nexport const findParentNode = predicate => ({ $from }) =>\n  findParentNodeClosestToPos($from, predicate);\n\n// :: ($pos: ResolvedPos, predicate: (node: ProseMirrorNode) \u2192 boolean) \u2192 ?{pos: number, start: number, depth: number, node: ProseMirrorNode}\n// Iterates over parent nodes starting from the given `$pos`, returning the closest node and its start position `predicate` returns truthy for. `start` points to the start position of the node, `pos` points directly before the node.\n//\n// ```javascript\n// const predicate = node => node.type === schema.nodes.blockquote;\n// const parent = findParentNodeClosestToPos(state.doc.resolve(5), predicate);\n// ```\nexport const findParentNodeClosestToPos = ($pos, predicate) => {\n  for (let i = $pos.depth; i > 0; i--) {\n    const node = $pos.node(i);\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node\n      };\n    }\n  }\n};\n\n// :: (predicate: (node: ProseMirrorNode) \u2192 boolean, domAtPos: (pos: number) \u2192 {node: dom.Node, offset: number}) \u2192 (selection: Selection) \u2192 ?dom.Node\n// Iterates over parent nodes, returning DOM reference of the closest node `predicate` returns truthy for.\n//\n// ```javascript\n// const domAtPos = view.domAtPos.bind(view);\n// const predicate = node => node.type === schema.nodes.table;\n// const parent = findParentDomRef(predicate, domAtPos)(selection); // <table>\n// ```\nexport const findParentDomRef = (predicate, domAtPos) => selection => {\n  const parent = findParentNode(predicate)(selection);\n  if (parent) {\n    return findDomRefAtPos(parent.pos, domAtPos);\n  }\n};\n\n// :: (predicate: (node: ProseMirrorNode) \u2192 boolean) \u2192 (selection: Selection) \u2192 boolean\n// Checks if there's a parent node `predicate` returns truthy for.\n//\n// ```javascript\n// if (hasParentNode(node => node.type === schema.nodes.table)(selection)) {\n//   // ....\n// }\n// ```\nexport const hasParentNode = predicate => selection => {\n  return !!findParentNode(predicate)(selection);\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>) \u2192 (selection: Selection) \u2192 ?{pos: number, start: number, depth: number, node: ProseMirrorNode}\n// Iterates over parent nodes, returning closest node of a given `nodeType`. `start` points to the start position of the node, `pos` points directly before the node.\n//\n// ```javascript\n// const parent = findParentNodeOfType(schema.nodes.paragraph)(selection);\n// ```\nexport const findParentNodeOfType = nodeType => selection => {\n  return findParentNode(node => equalNodeType(nodeType, node))(selection);\n};\n\n// :: ($pos: ResolvedPos, nodeType: union<NodeType, [NodeType]>) \u2192 ?{pos: number, start: number, depth: number, node: ProseMirrorNode}\n// Iterates over parent nodes starting from the given `$pos`, returning closest node of a given `nodeType`. `start` points to the start position of the node, `pos` points directly before the node.\n//\n// ```javascript\n// const parent = findParentNodeOfTypeClosestToPos(state.doc.resolve(10), schema.nodes.paragraph);\n// ```\nexport const findParentNodeOfTypeClosestToPos = ($pos, nodeType) => {\n  return findParentNodeClosestToPos($pos, node =>\n    equalNodeType(nodeType, node)\n  );\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>) \u2192 (selection: Selection) \u2192 boolean\n// Checks if there's a parent node of a given `nodeType`.\n//\n// ```javascript\n// if (hasParentNodeOfType(schema.nodes.table)(selection)) {\n//   // ....\n// }\n// ```\nexport const hasParentNodeOfType = nodeType => selection => {\n  return hasParentNode(node => equalNodeType(nodeType, node))(selection);\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>, domAtPos: (pos: number) \u2192 {node: dom.Node, offset: number}) \u2192 (selection: Selection) \u2192 ?dom.Node\n// Iterates over parent nodes, returning DOM reference of the closest node of a given `nodeType`.\n//\n// ```javascript\n// const domAtPos = view.domAtPos.bind(view);\n// const parent = findParentDomRefOfType(schema.nodes.codeBlock, domAtPos)(selection); // <pre>\n// ```\nexport const findParentDomRefOfType = (nodeType, domAtPos) => selection => {\n  return findParentDomRef(node => equalNodeType(nodeType, node), domAtPos)(\n    selection\n  );\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>) \u2192 (selection: Selection) \u2192 ?{pos: number, start: number, depth: number, node: ProseMirrorNode}\n// Returns a node of a given `nodeType` if it is selected. `start` points to the start position of the node, `pos` points directly before the node.\n//\n// ```javascript\n// const { extension, inlineExtension, bodiedExtension } = schema.nodes;\n// const selectedNode = findSelectedNodeOfType([\n//   extension,\n//   inlineExtension,\n//   bodiedExtension,\n// ])(selection);\n// ```\nexport const findSelectedNodeOfType = nodeType => selection => {\n  if (isNodeSelection(selection)) {\n    const { node, $from } = selection;\n    if (equalNodeType(nodeType, node)) {\n      return { node, pos: $from.pos, depth: $from.depth };\n    }\n  }\n};\n\n// :: (selection: Selection) \u2192 ?number\n// Returns position of the previous node.\n//\n// ```javascript\n// const pos = findPositionOfNodeBefore(tr.selection);\n// ```\nexport const findPositionOfNodeBefore = selection => {\n  const { nodeBefore } = selection.$from;\n  const maybeSelection = Selection.findFrom(selection.$from, -1);\n  if (maybeSelection && nodeBefore) {\n    // leaf node\n    const parent = findParentNodeOfType(nodeBefore.type)(maybeSelection);\n    if (parent) {\n      return parent.pos;\n    }\n    return maybeSelection.$from.pos;\n  }\n};\n\n// :: (position: number, domAtPos: (pos: number) \u2192 {node: dom.Node, offset: number}) \u2192 dom.Node\n// Returns DOM reference of a node at a given `position`. If the node type is of type `TEXT_NODE` it will return the reference of the parent node.\n//\n// ```javascript\n// const domAtPos = view.domAtPos.bind(view);\n// const ref = findDomRefAtPos($from.pos, domAtPos);\n// ```\nexport const findDomRefAtPos = (position, domAtPos) => {\n  const dom = domAtPos(position);\n  const node = dom.node.childNodes[dom.offset];\n\n  if (dom.node.nodeType === Node.TEXT_NODE) {\n    return dom.node.parentNode;\n  }\n\n  if (!node || node.nodeType === Node.TEXT_NODE) {\n    return dom.node;\n  }\n\n  return node;\n};\n", "// :: (node: ProseMirrorNode, descend: ?boolean) \u2192 [{ node: ProseMirrorNode, pos: number }]\n// Flattens descendants of a given `node`. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const children = flatten(node);\n// ```\nexport const flatten = (node, descend = true) => {\n  if (!node) {\n    throw new Error('Invalid \"node\" parameter');\n  }\n  const result = [];\n  node.descendants((child, pos) => {\n    result.push({ node: child, pos });\n    if (!descend) {\n      return false;\n    }\n  });\n  return result;\n};\n\n// :: (node: ProseMirrorNode, predicate: (node: ProseMirrorNode) \u2192 boolean, descend: ?boolean) \u2192 [{ node: ProseMirrorNode, pos: number }]\n// Iterates over descendants of a given `node`, returning child nodes predicate returns truthy for. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const textNodes = findChildren(node, child => child.isText, false);\n// ```\nexport const findChildren = (node, predicate, descend) => {\n  if (!node) {\n    throw new Error('Invalid \"node\" parameter');\n  } else if (!predicate) {\n    throw new Error('Invalid \"predicate\" parameter');\n  }\n  return flatten(node, descend).filter(child => predicate(child.node));\n};\n\n// :: (node: ProseMirrorNode, descend: ?boolean) \u2192 [{ node: ProseMirrorNode, pos: number }]\n// Returns text nodes of a given `node`. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const textNodes = findTextNodes(node);\n// ```\nexport const findTextNodes = (node, descend) => {\n  return findChildren(node, child => child.isText, descend);\n};\n\n// :: (node: ProseMirrorNode, descend: ?boolean) \u2192 [{ node: ProseMirrorNode, pos: number }]\n// Returns inline nodes of a given `node`. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const inlineNodes = findInlineNodes(node);\n// ```\nexport const findInlineNodes = (node, descend) => {\n  return findChildren(node, child => child.isInline, descend);\n};\n\n// :: (node: ProseMirrorNode, descend: ?boolean) \u2192 [{ node: ProseMirrorNode, pos: number }]\n// Returns block descendants of a given `node`. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const blockNodes = findBlockNodes(node);\n// ```\nexport const findBlockNodes = (node, descend) => {\n  return findChildren(node, child => child.isBlock, descend);\n};\n\n// :: (node: ProseMirrorNode, predicate: (attrs: ?Object) \u2192 boolean, descend: ?boolean) \u2192 [{ node: ProseMirrorNode, pos: number }]\n// Iterates over descendants of a given `node`, returning child nodes predicate returns truthy for. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const mergedCells = findChildrenByAttr(table, attrs => attrs.colspan === 2);\n// ```\nexport const findChildrenByAttr = (node, predicate, descend) => {\n  return findChildren(node, child => !!predicate(child.attrs), descend);\n};\n\n// :: (node: ProseMirrorNode, nodeType: NodeType, descend: ?boolean) \u2192 [{ node: ProseMirrorNode, pos: number }]\n// Iterates over descendants of a given `node`, returning child nodes of a given nodeType. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const cells = findChildrenByType(table, schema.nodes.tableCell);\n// ```\nexport const findChildrenByType = (node, nodeType, descend) => {\n  return findChildren(node, child => child.type === nodeType, descend);\n};\n\n// :: (node: ProseMirrorNode, markType: markType, descend: ?boolean) \u2192 [{ node: ProseMirrorNode, pos: number }]\n// Iterates over descendants of a given `node`, returning child nodes that have a mark of a given markType. It doesn't descend into a `node` when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const nodes = findChildrenByMark(state.doc, schema.marks.strong);\n// ```\nexport const findChildrenByMark = (node, markType, descend) => {\n  return findChildren(node, child => markType.isInSet(child.marks), descend);\n};\n\n// :: (node: ProseMirrorNode, nodeType: NodeType) \u2192 boolean\n// Returns `true` if a given node contains nodes of a given `nodeType`\n//\n// ```javascript\n// if (contains(panel, schema.nodes.listItem)) {\n//   // ...\n// }\n// ```\nexport const contains = (node, nodeType) => {\n  return !!findChildrenByType(node, nodeType).length;\n};\n", "import {\n  CellSelection,\n  TableMap,\n  addColumn,\n  addRow,\n  removeColumn,\n  removeRow\n} from 'prosemirror-tables';\nimport { Selection } from 'prosemirror-state';\nimport { findParentNode, findParentNodeClosestToPos } from './selection';\nimport { setTextSelection, safeInsert } from './transforms';\nimport {\n  cloneTr,\n  tableNodeTypes,\n  findTableClosestToPos,\n  createCell,\n  isRectSelected,\n  moveTableRow,\n  moveTableColumn,\n  checkInvalidMovements\n} from './helpers';\n\n// :: (selection: Selection) \u2192 ?{pos: number, start: number, node: ProseMirrorNode}\n// Iterates over parent nodes, returning the closest table node.\n//\n// ```javascript\n// const table = findTable(selection);\n// ```\nexport const findTable = selection =>\n  findParentNode(\n    node => node.type.spec.tableRole && node.type.spec.tableRole === 'table'\n  )(selection);\n\n// :: (selection: Selection) \u2192 boolean\n// Checks if current selection is a `CellSelection`.\n//\n// ```javascript\n// if (isCellSelection(selection)) {\n//   // ...\n// }\n// ```\nexport const isCellSelection = selection => {\n  return selection instanceof CellSelection;\n};\n\n// :: (selection: Selection) \u2192 ?{left: number, right: number, top: number, bottom: number}\n// Get the selection rectangle. Returns `undefined` if selection is not a CellSelection.\n//\n// ```javascript\n// const rect = getSelectionRect(selection);\n// ```\nexport const getSelectionRect = selection => {\n  if (!isCellSelection(selection)) {\n    return;\n  }\n  const start = selection.$anchorCell.start(-1);\n  const map = TableMap.get(selection.$anchorCell.node(-1));\n  return map.rectBetween(\n    selection.$anchorCell.pos - start,\n    selection.$headCell.pos - start\n  );\n};\n\n// :: (columnIndex: number) \u2192 (selection: Selection) \u2192 boolean\n// Checks if entire column at index `columnIndex` is selected.\n//\n// ```javascript\n// const className = isColumnSelected(i)(selection) ? 'selected' : '';\n// ```\nexport const isColumnSelected = columnIndex => selection => {\n  if (isCellSelection(selection)) {\n    const map = TableMap.get(selection.$anchorCell.node(-1));\n    return isRectSelected({\n      left: columnIndex,\n      right: columnIndex + 1,\n      top: 0,\n      bottom: map.height\n    })(selection);\n  }\n\n  return false;\n};\n\n// :: (rowIndex: number) \u2192 (selection: Selection) \u2192 boolean\n// Checks if entire row at index `rowIndex` is selected.\n//\n// ```javascript\n// const className = isRowSelected(i)(selection) ? 'selected' : '';\n// ```\nexport const isRowSelected = rowIndex => selection => {\n  if (isCellSelection(selection)) {\n    const map = TableMap.get(selection.$anchorCell.node(-1));\n    return isRectSelected({\n      left: 0,\n      right: map.width,\n      top: rowIndex,\n      bottom: rowIndex + 1\n    })(selection);\n  }\n\n  return false;\n};\n\n// :: (selection: Selection) \u2192 boolean\n// Checks if entire table is selected\n//\n// ```javascript\n// const className = isTableSelected(selection) ? 'selected' : '';\n// ```\nexport const isTableSelected = selection => {\n  if (isCellSelection(selection)) {\n    const map = TableMap.get(selection.$anchorCell.node(-1));\n    return isRectSelected({\n      left: 0,\n      right: map.width,\n      top: 0,\n      bottom: map.height\n    })(selection);\n  }\n\n  return false;\n};\n\n// :: (columnIndex: union<number, [number]>) \u2192 (selection: Selection) \u2192 ?[{pos: number, start: number, node: ProseMirrorNode}]\n// Returns an array of cells in a column(s), where `columnIndex` could be a column index or an array of column indexes.\n//\n// ```javascript\n// const cells = getCellsInColumn(i)(selection); // [{node, pos}, {node, pos}]\n// ```\nexport const getCellsInColumn = columnIndex => selection => {\n  const table = findTable(selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    const indexes = Array.isArray(columnIndex)\n      ? columnIndex\n      : Array.from([columnIndex]);\n    return indexes.reduce((acc, index) => {\n      if (index >= 0 && index <= map.width - 1) {\n        const cells = map.cellsInRect({\n          left: index,\n          right: index + 1,\n          top: 0,\n          bottom: map.height\n        });\n        return acc.concat(\n          cells.map(nodePos => {\n            const node = table.node.nodeAt(nodePos);\n            const pos = nodePos + table.start;\n            return { pos, start: pos + 1, node };\n          })\n        );\n      }\n    }, []);\n  }\n};\n\n// :: (rowIndex: union<number, [number]>) \u2192 (selection: Selection) \u2192 ?[{pos: number, start: number, node: ProseMirrorNode}]\n// Returns an array of cells in a row(s), where `rowIndex` could be a row index or an array of row indexes.\n//\n// ```javascript\n// const cells = getCellsInRow(i)(selection); // [{node, pos}, {node, pos}]\n// ```\nexport const getCellsInRow = rowIndex => selection => {\n  const table = findTable(selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    const indexes = Array.isArray(rowIndex) ? rowIndex : Array.from([rowIndex]);\n    return indexes.reduce((acc, index) => {\n      if (index >= 0 && index <= map.height - 1) {\n        const cells = map.cellsInRect({\n          left: 0,\n          right: map.width,\n          top: index,\n          bottom: index + 1\n        });\n        return acc.concat(\n          cells.map(nodePos => {\n            const node = table.node.nodeAt(nodePos);\n            const pos = nodePos + table.start;\n            return { pos, start: pos + 1, node };\n          })\n        );\n      }\n    }, []);\n  }\n};\n\n// :: (selection: Selection) \u2192 ?[{pos: number, start: number, node: ProseMirrorNode}]\n// Returns an array of all cells in a table.\n//\n// ```javascript\n// const cells = getCellsInTable(selection); // [{node, pos}, {node, pos}]\n// ```\nexport const getCellsInTable = selection => {\n  const table = findTable(selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    const cells = map.cellsInRect({\n      left: 0,\n      right: map.width,\n      top: 0,\n      bottom: map.height\n    });\n    return cells.map(nodePos => {\n      const node = table.node.nodeAt(nodePos);\n      const pos = nodePos + table.start;\n      return { pos, start: pos + 1, node };\n    });\n  }\n};\n\nconst select = type => (index, expand) => tr => {\n  const table = findTable(tr.selection);\n  const isRowSelection = type === 'row';\n  if (table) {\n    const map = TableMap.get(table.node);\n\n    // Check if the index is valid\n    if (index >= 0 && index < (isRowSelection ? map.height : map.width)) {\n      let left = isRowSelection ? 0 : index;\n      let top = isRowSelection ? index : 0;\n      let right = isRowSelection ? map.width : index + 1;\n      let bottom = isRowSelection ? index + 1 : map.height;\n\n      if (expand) {\n        const cell = findCellClosestToPos(tr.selection.$from);\n        if (!cell) {\n          return tr;\n        }\n\n        const selRect = map.findCell(cell.pos - table.start);\n        if (isRowSelection) {\n          top = Math.min(top, selRect.top);\n          bottom = Math.max(bottom, selRect.bottom);\n        } else {\n          left = Math.min(left, selRect.left);\n          right = Math.max(right, selRect.right);\n        }\n      }\n\n      const cellsInFirstRow = map.cellsInRect({\n        left,\n        top,\n        right: isRowSelection ? right : left + 1,\n        bottom: isRowSelection ? top + 1 : bottom\n      });\n\n      const cellsInLastRow =\n        bottom - top === 1\n          ? cellsInFirstRow\n          : map.cellsInRect({\n              left: isRowSelection ? left : right - 1,\n              top: isRowSelection ? bottom - 1 : top,\n              right,\n              bottom\n            });\n\n      const head = table.start + cellsInFirstRow[0];\n      const anchor = table.start + cellsInLastRow[cellsInLastRow.length - 1];\n      const $head = tr.doc.resolve(head);\n      const $anchor = tr.doc.resolve(anchor);\n\n      return cloneTr(tr.setSelection(new CellSelection($anchor, $head)));\n    }\n  }\n  return tr;\n};\n\n// :: (columnIndex: number, expand: ?boolean) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that creates a `CellSelection` on a column at index `columnIndex`.\n// Use the optional `expand` param to extend from current selection.\n//\n// ```javascript\n// dispatch(\n//   selectColumn(i)(state.tr)\n// );\n// ```\nexport const selectColumn = select('column');\n\n// :: (rowIndex: number, expand: ?boolean) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that creates a `CellSelection` on a column at index `rowIndex`.\n// Use the optional `expand` param to extend from current selection.\n//\n// ```javascript\n// dispatch(\n//   selectRow(i)(state.tr)\n// );\n// ```\nexport const selectRow = select('row');\n\n// :: (selection: Selection) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that creates a `CellSelection` on the entire table.\n//\n// ```javascript\n// dispatch(\n//   selectTable(i)(state.tr)\n// );\n// ```\nexport const selectTable = tr => {\n  const table = findTable(tr.selection);\n  if (table) {\n    const { map } = TableMap.get(table.node);\n    if (map && map.length) {\n      const head = table.start + map[0];\n      const anchor = table.start + map[map.length - 1];\n      const $head = tr.doc.resolve(head);\n      const $anchor = tr.doc.resolve(anchor);\n\n      return cloneTr(tr.setSelection(new CellSelection($anchor, $head)));\n    }\n  }\n  return tr;\n};\n\n// :: (cell: {pos: number, node: ProseMirrorNode}, schema: Schema) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that clears the content of a given `cell`.\n//\n// ```javascript\n// const $pos = state.doc.resolve(13);\n// dispatch(\n//   emptyCell(findCellClosestToPos($pos), state.schema)(state.tr)\n// );\n// ```\nexport const emptyCell = (cell, schema) => tr => {\n  if (cell) {\n    const { content } = tableNodeTypes(schema).cell.createAndFill();\n    if (!cell.node.content.eq(content)) {\n      tr.replaceWith(cell.pos + 1, cell.pos + cell.node.nodeSize, content);\n      return cloneTr(tr);\n    }\n  }\n  return tr;\n};\n\n// :: (columnIndex: number) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that adds a new column at index `columnIndex`.\n//\n// ```javascript\n// dispatch(\n//   addColumnAt(i)(state.tr)\n// );\n// ```\nexport const addColumnAt = columnIndex => tr => {\n  const table = findTable(tr.selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    if (columnIndex >= 0 && columnIndex <= map.width) {\n      return cloneTr(\n        addColumn(\n          tr,\n          {\n            map,\n            tableStart: table.start,\n            table: table.node\n          },\n          columnIndex\n        )\n      );\n    }\n  }\n  return tr;\n};\n\n// :: (originRowIndex: number, targetRowIndex: targetColumnIndex, options?: MovementOptions) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that moves the origin row to the target index;\n//\n// by default \"tryToFit\" is false, that means if you try to move a row to a place\n// where we will need to split a row with merged cells it'll throw an exception, for example:\n//\n// ```\n//      ____________________________\n//     |      |      |             |\n//  0  |  A1  |  B1  |     C1      |\n//     |______|______|______ ______|\n//     |      |             |      |\n//  1  |  A2  |     B2      |      |\n//     |______|______ ______|      |\n//     |      |      |      |  D1  |\n//  2  |  A3  |  B3  |  C2  |      |\n//     |______|______|______|______|\n// ```\n//\n// if you try to move the row 0 to the row index 1 with tryToFit false,\n// it'll throw an exception since you can't split the row 1;\n// but if \"tryToFit\" is true, it'll move the row using the current direction.\n//\n// We defined current direction using the target and origin values\n// if the origin is greater than the target, that means the course is `bottom-to-top`,\n// so the `tryToFit` logic will use this direction to determine\n// if we should move the column to the right or the left.\n//\n// for example, if you call the function using `moveRow(0, 1, { tryToFit: true })`\n// the result will be:\n// ```\n//      ____________________________\n//     |      |             |      |\n//  0  |  A2  |     B2      |      |\n//     |______|______ ______|      |\n//     |      |      |      |  D1  |\n//  1  |  A3  |  B3  |  C2  |      |\n//     |______|______|______|______|\n//     |      |      |             |\n//  2  |  A1  |  B1  |     C1      |\n//     |______|______|______ ______|\n// ```\n//\n// since we could put the row zero on index one,\n// we pushed to the best place to fit the row index 0,\n// in this case, row index 2.\n//\n//\n// -------- HOW TO OVERRIDE DIRECTION --------\n//\n// If you set \"tryToFit\" to \"true\", it will try to figure out the best direction\n// place to fit using the origin and target index, for example:\n//\n//\n// ```\n//      ____________________________\n//     |      |      |             |\n//  0  |  A1  |  B1  |     C1      |\n//     |______|______|______ ______|\n//     |      |             |      |\n//  1  |  A2  |     B2      |      |\n//     |______|______ ______|      |\n//     |      |      |      |  D1  |\n//  2  |  A3  |  B3  |  C2  |      |\n//     |______|______|______|______|\n//     |      |             |      |\n//  3  |  A4  |     B4      |      |\n//     |______|______ ______|      |\n//     |      |      |      |  D2  |\n//  4  |  A5  |  B5  |  C3  |      |\n//     |______|______|______|______|\n// ```\n//\n//\n// If you try to move the row 0 to row index 4 with \"tryToFit\" enabled, by default,\n// the code will put it on after the merged rows,\n// but you can override it using the \"direction\" option.\n//\n// -1: Always put the origin before the target\n// ```\n//      ____________________________\n//     |      |             |      |\n//  0  |  A2  |     B2      |      |\n//     |______|______ ______|      |\n//     |      |      |      |  D1  |\n//  1  |  A3  |  B3  |  C2  |      |\n//     |______|______|______|______|\n//     |      |      |             |\n//  2  |  A1  |  B1  |     C1      |\n//     |______|______|______ ______|\n//     |      |             |      |\n//  3  |  A4  |     B4      |      |\n//     |______|______ ______|      |\n//     |      |      |      |  D2  |\n//  4  |  A5  |  B5  |  C3  |      |\n//     |______|______|______|______|\n// ```\n//\n//  0: Automatically decide the best place to fit\n// ```\n//      ____________________________\n//     |      |             |      |\n//  0  |  A2  |     B2      |      |\n//     |______|______ ______|      |\n//     |      |      |      |  D1  |\n//  1  |  A3  |  B3  |  C2  |      |\n//     |______|______|______|______|\n//     |      |             |      |\n//  2  |  A4  |     B4      |      |\n//     |______|______ ______|      |\n//     |      |      |      |  D2  |\n//  3  |  A5  |  B5  |  C3  |      |\n//     |______|______|______|______|\n//     |      |      |             |\n//  4  |  A1  |  B1  |     C1      |\n//     |______|______|______ ______|\n// ```\n//\n//  1: Always put the origin after the target\n// ```\n//      ____________________________\n//     |      |             |      |\n//  0  |  A2  |     B2      |      |\n//     |______|______ ______|      |\n//     |      |      |      |  D1  |\n//  1  |  A3  |  B3  |  C2  |      |\n//     |______|______|______|______|\n//     |      |             |      |\n//  2  |  A4  |     B4      |      |\n//     |______|______ ______|      |\n//     |      |      |      |  D2  |\n//  3  |  A5  |  B5  |  C3  |      |\n//     |______|______|______|______|\n//     |      |      |             |\n//  4  |  A1  |  B1  |     C1      |\n//     |______|______|______ ______|\n// ```\n//\n// ```javascript\n// dispatch(\n//   moveRow(x, y, options)(state.tr)\n// );\n// ```\nexport const moveRow = (originRowIndex, targetRowIndex, opts) => tr => {\n  const defaultOptions = { tryToFit: false, direction: 0 };\n  const options = Object.assign(defaultOptions, opts);\n  const table = findTable(tr.selection);\n  if (!table) {\n    return tr;\n  }\n\n  const { indexes: indexesOriginRow } = getSelectionRangeInRow(originRowIndex)(\n    tr\n  );\n  const { indexes: indexesTargetRow } = getSelectionRangeInRow(targetRowIndex)(\n    tr\n  );\n\n  if (indexesOriginRow.indexOf(targetRowIndex) > -1) {\n    return tr;\n  }\n\n  if (!options.tryToFit && indexesTargetRow.length > 1) {\n    checkInvalidMovements(\n      originRowIndex,\n      targetRowIndex,\n      indexesTargetRow,\n      'row'\n    );\n  }\n\n  const newTable = moveTableRow(\n    table,\n    indexesOriginRow,\n    indexesTargetRow,\n    options.direction\n  );\n\n  return cloneTr(tr).replaceWith(\n    table.pos,\n    table.pos + table.node.nodeSize,\n    newTable\n  );\n};\n\n// :: (originColumnIndex: number, targetColumnIndex: targetColumnIndex, options?: MovementOptions) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that moves the origin column to the target index;\n//\n// by default \"tryToFit\" is false, that means if you try to move a column to a place\n// where we will need to split a column with merged cells it'll throw an exception, for example:\n//\n// ```\n//    0      1         2\n//  ____________________________\n// |      |      |             |\n// |  A1  |  B1  |     C1      |\n// |______|______|______ ______|\n// |      |             |      |\n// |  A2  |     B2      |      |\n// |______|______ ______|      |\n// |      |      |      |  D1  |\n// |  A3  |  B3  |  C2  |      |\n// |______|______|______|______|\n// ```\n//\n//\n// if you try to move the column 0 to the column index 1 with tryToFit false,\n// it'll throw an exception since you can't split the column 1;\n// but if \"tryToFit\" is true, it'll move the column using the current direction.\n//\n// We defined current direction using the target and origin values\n// if the origin is greater than the target, that means the course is `right-to-left`,\n// so the `tryToFit` logic will use this direction to determine\n// if we should move the column to the right or the left.\n//\n// for example, if you call the function using `moveColumn(0, 1, { tryToFit: true })`\n// the result will be:\n//\n// ```\n//    0       1             2\n// _____________________ _______\n// |      |             |      |\n// |  B1  |     C1      |  A1  |\n// |______|______ ______|______|\n// |             |      |      |\n// |     B2      |      |  A2  |\n// |______ ______|      |______|\n// |      |      |  D1  |      |\n// |  B3  |  C2  |      |  A3  |\n// |______|______|______|______|\n// ```\n//\n// since we could put the column zero on index one,\n// we pushed to the best place to fit the column 0, in this case, column index 2.\n//\n// -------- HOW TO OVERRIDE DIRECTION --------\n//\n// If you set \"tryToFit\" to \"true\", it will try to figure out the best direction\n// place to fit using the origin and target index, for example:\n//\n//\n// ```\n//     0      1       2     3      4      5       6\n//   _________________________________________________\n//  |      |      |             |      |             |\n//  |  A1  |  B1  |     C1      |  E1  |     F1      |\n//  |______|______|______ ______|______|______ ______|\n//  |      |             |      |             |      |\n//  |  A2  |     B2      |      |     E2      |      |\n//  |______|______ ______|      |______ ______|      |\n//  |      |      |      |  D1  |      |      |  G2  |\n//  |  A3  |  B3  |  C3  |      |  E3  |  F3  |      |\n//  |______|______|______|______|______|______|______|\n// ```\n//\n//\n// If you try to move the column 0 to column index 5 with \"tryToFit\" enabled, by default,\n// the code will put it on after the merged columns,\n// but you can override it using the \"direction\" option.\n//\n// -1: Always put the origin before the target\n//\n// ```\n//     0      1       2     3      4      5       6\n//   _________________________________________________\n//  |      |             |      |      |             |\n//  |  B1  |     C1      |  A1  |  E1  |     F1      |\n//  |______|______ ______|______|______|______ ______|\n//  |             |      |      |             |      |\n//  |     B2      |      |  A2  |     E2      |      |\n//  |______ ______|      |______|______ ______|      |\n//  |      |      |  D1  |      |      |      |  G2  |\n//  |  B3  |  C3  |      |  A3  |  E3  |  F3  |      |\n//  |______|______|______|______|______|______|______|\n// ```\n//\n//  0: Automatically decide the best place to fit\n//\n// ```\n//     0      1       2     3      4      5       6\n//   _________________________________________________\n//  |      |             |      |             |      |\n//  |  B1  |     C1      |  E1  |     F1      |  A1  |\n//  |______|______ ______|______|______ ______|______|\n//  |             |      |             |      |      |\n//  |     B2      |      |     E2      |      |  A2  |\n//  |______ ______|      |______ ______|      |______|\n//  |      |      |  D1  |      |      |  G2  |      |\n//  |  B3  |  C3  |      |  E3  |  F3  |      |  A3  |\n//  |______|______|______|______|______|______|______|\n// ```\n//\n//  1: Always put the origin after the target\n//\n// ```\n//     0      1       2     3      4      5       6\n//   _________________________________________________\n//  |      |             |      |             |      |\n//  |  B1  |     C1      |  E1  |     F1      |  A1  |\n//  |______|______ ______|______|______ ______|______|\n//  |             |      |             |      |      |\n//  |     B2      |      |     E2      |      |  A2  |\n//  |______ ______|      |______ ______|      |______|\n//  |      |      |  D1  |      |      |  G2  |      |\n//  |  B3  |  C3  |      |  E3  |  F3  |      |  A3  |\n//  |______|______|______|______|______|______|______|\n// ```\n//\n// ```javascript\n// dispatch(\n//   moveColumn(x, y, options)(state.tr)\n// );\n// ```\nexport const moveColumn = (\n  originColumnIndex,\n  targetColumnIndex,\n  opts\n) => tr => {\n  const defaultOptions = { tryToFit: false, direction: 0 };\n  const options = Object.assign(defaultOptions, opts);\n  const table = findTable(tr.selection);\n  if (!table) {\n    return tr;\n  }\n\n  const { indexes: indexesOriginColumn } = getSelectionRangeInColumn(\n    originColumnIndex\n  )(tr);\n  const { indexes: indexesTargetColumn } = getSelectionRangeInColumn(\n    targetColumnIndex\n  )(tr);\n\n  if (indexesOriginColumn.indexOf(targetColumnIndex) > -1) {\n    return tr;\n  }\n\n  if (!options.tryToFit && indexesTargetColumn.length > 1) {\n    checkInvalidMovements(\n      originColumnIndex,\n      targetColumnIndex,\n      indexesTargetColumn,\n      'column'\n    );\n  }\n\n  const newTable = moveTableColumn(\n    table,\n    indexesOriginColumn,\n    indexesTargetColumn,\n    options.direction\n  );\n\n  return cloneTr(tr).replaceWith(\n    table.pos,\n    table.pos + table.node.nodeSize,\n    newTable\n  );\n};\n\n// :: (rowIndex: number, clonePreviousRow?: boolean) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that adds a new row at index `rowIndex`. Optionally clone the previous row.\n//\n// ```javascript\n// dispatch(\n//   addRowAt(i)(state.tr)\n// );\n// ```\n//\n// ```javascript\n// dispatch(\n//   addRowAt(i, true)(state.tr)\n// );\n// ```\nexport const addRowAt = (rowIndex, clonePreviousRow) => tr => {\n  const table = findTable(tr.selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    const cloneRowIndex = rowIndex - 1;\n\n    if (clonePreviousRow && cloneRowIndex >= 0) {\n      return cloneTr(cloneRowAt(cloneRowIndex)(tr));\n    }\n\n    if (rowIndex >= 0 && rowIndex <= map.height) {\n      return cloneTr(\n        addRow(\n          tr,\n          {\n            map,\n            tableStart: table.start,\n            table: table.node\n          },\n          rowIndex\n        )\n      );\n    }\n  }\n  return tr;\n};\n\n// :: (cloneRowIndex: number) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that adds a new row after `cloneRowIndex`, cloning the row attributes at `cloneRowIndex`.\n//\n// ```javascript\n// dispatch(\n//   cloneRowAt(i)(state.tr)\n// );\n// ```\nexport const cloneRowAt = rowIndex => tr => {\n  const table = findTable(tr.selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n\n    if (rowIndex >= 0 && rowIndex <= map.height) {\n      const tableNode = table.node;\n      const tableNodes = tableNodeTypes(tableNode.type.schema);\n\n      let rowPos = table.start;\n      for (let i = 0; i < rowIndex + 1; i++) {\n        rowPos += tableNode.child(i).nodeSize;\n      }\n\n      const cloneRow = tableNode.child(rowIndex);\n      // Re-create the same nodes with same attrs, dropping the node content.\n      let cells = [];\n      let rowWidth = 0;\n      cloneRow.forEach(cell => {\n        // If we're copying a row with rowspan somewhere, we dont want to copy that cell\n        // We'll increment its span below.\n        if (cell.attrs.rowspan === 1) {\n          rowWidth += cell.attrs.colspan;\n          cells.push(\n            tableNodes[cell.type.spec.tableRole].createAndFill(\n              cell.attrs,\n              cell.marks\n            )\n          );\n        }\n      });\n\n      // If a higher row spans past our clone row, bump the higher row to cover this new row too.\n      if (rowWidth < map.width) {\n        let rowSpanCells = [];\n        for (let i = rowIndex; i >= 0; i--) {\n          let foundCells = filterCellsInRow(i, (cell, tr) => {\n            const rowspan = cell.node.attrs.rowspan;\n            const spanRange = i + rowspan;\n            return rowspan > 1 && spanRange > rowIndex;\n          })(tr);\n          rowSpanCells.push(...foundCells);\n        }\n\n        if (rowSpanCells.length) {\n          rowSpanCells.forEach(cell => {\n            tr = setCellAttrs(cell, {\n              rowspan: cell.node.attrs.rowspan + 1\n            })(tr);\n          });\n        }\n      }\n\n      return safeInsert(tableNodes.row.create(cloneRow.attrs, cells), rowPos)(\n        tr\n      );\n    }\n  }\n  return tr;\n};\n\n// :: (columnIndex: number) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that removes a column at index `columnIndex`. If there is only one column left, it will remove the entire table.\n//\n// ```javascript\n// dispatch(\n//   removeColumnAt(i)(state.tr)\n// );\n// ```\nexport const removeColumnAt = columnIndex => tr => {\n  const table = findTable(tr.selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    if (columnIndex === 0 && map.width === 1) {\n      return removeTable(tr);\n    } else if (columnIndex >= 0 && columnIndex <= map.width) {\n      removeColumn(\n        tr,\n        {\n          map,\n          tableStart: table.start,\n          table: table.node\n        },\n        columnIndex\n      );\n      return cloneTr(tr);\n    }\n  }\n  return tr;\n};\n\n// :: (rowIndex: number) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that removes a row at index `rowIndex`. If there is only one row left, it will remove the entire table.\n//\n// ```javascript\n// dispatch(\n//   removeRowAt(i)(state.tr)\n// );\n// ```\nexport const removeRowAt = rowIndex => tr => {\n  const table = findTable(tr.selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    if (rowIndex === 0 && map.height === 1) {\n      return removeTable(tr);\n    } else if (rowIndex >= 0 && rowIndex <= map.height) {\n      removeRow(\n        tr,\n        {\n          map,\n          tableStart: table.start,\n          table: table.node\n        },\n        rowIndex\n      );\n      return cloneTr(tr);\n    }\n  }\n  return tr;\n};\n\n// :: (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that removes a table node if the cursor is inside of it.\n//\n// ```javascript\n// dispatch(\n//   removeTable(state.tr)\n// );\n// ```\nexport const removeTable = tr => {\n  const { $from } = tr.selection;\n  for (let depth = $from.depth; depth > 0; depth--) {\n    let node = $from.node(depth);\n    if (node.type.spec.tableRole === 'table') {\n      return cloneTr(tr.delete($from.before(depth), $from.after(depth)));\n    }\n  }\n  return tr;\n};\n\n// :: (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that removes selected columns.\n//\n// ```javascript\n// dispatch(\n//   removeSelectedColumns(state.tr)\n// );\n// ```\nexport const removeSelectedColumns = tr => {\n  const { selection } = tr;\n  if (isTableSelected(selection)) {\n    return removeTable(tr);\n  }\n  if (isCellSelection(selection)) {\n    const table = findTable(selection);\n    if (table) {\n      const map = TableMap.get(table.node);\n      const rect = map.rectBetween(\n        selection.$anchorCell.pos - table.start,\n        selection.$headCell.pos - table.start\n      );\n\n      if (rect.left == 0 && rect.right == map.width) {\n        return false;\n      }\n\n      const pmTableRect = Object.assign({}, rect, {\n        map,\n        table: table.node,\n        tableStart: table.start\n      });\n\n      for (let i = pmTableRect.right - 1; ; i--) {\n        removeColumn(tr, pmTableRect, i);\n        if (i === pmTableRect.left) {\n          break;\n        }\n        pmTableRect.table = pmTableRect.tableStart\n          ? tr.doc.nodeAt(pmTableRect.tableStart - 1)\n          : tr.doc;\n        pmTableRect.map = TableMap.get(pmTableRect.table);\n      }\n      return cloneTr(tr);\n    }\n  }\n  return tr;\n};\n\n// :: (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that removes selected rows.\n//\n// ```javascript\n// dispatch(\n//   removeSelectedRows(state.tr)\n// );\n// ```\nexport const removeSelectedRows = tr => {\n  const { selection } = tr;\n  if (isTableSelected(selection)) {\n    return removeTable(tr);\n  }\n  if (isCellSelection(selection)) {\n    const table = findTable(selection);\n    if (table) {\n      const map = TableMap.get(table.node);\n      const rect = map.rectBetween(\n        selection.$anchorCell.pos - table.start,\n        selection.$headCell.pos - table.start\n      );\n\n      if (rect.top == 0 && rect.bottom == map.height) {\n        return false;\n      }\n\n      const pmTableRect = Object.assign({}, rect, {\n        map,\n        table: table.node,\n        tableStart: table.start\n      });\n\n      for (let i = pmTableRect.bottom - 1; ; i--) {\n        removeRow(tr, pmTableRect, i);\n        if (i === pmTableRect.top) {\n          break;\n        }\n        pmTableRect.table = pmTableRect.tableStart\n          ? tr.doc.nodeAt(pmTableRect.tableStart - 1)\n          : tr.doc;\n        pmTableRect.map = TableMap.get(pmTableRect.table);\n      }\n\n      return cloneTr(tr);\n    }\n  }\n  return tr;\n};\n\n// :: ($pos: ResolvedPos) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that removes a column closest to a given `$pos`.\n//\n// ```javascript\n// dispatch(\n//   removeColumnClosestToPos(state.doc.resolve(3))(state.tr)\n// );\n// ```\nexport const removeColumnClosestToPos = $pos => tr => {\n  const rect = findCellRectClosestToPos($pos);\n  if (rect) {\n    return removeColumnAt(rect.left)(setTextSelection($pos.pos)(tr));\n  }\n  return tr;\n};\n\n// :: ($pos: ResolvedPos) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that removes a row closest to a given `$pos`.\n//\n// ```javascript\n// dispatch(\n//   removeRowClosestToPos(state.doc.resolve(3))(state.tr)\n// );\n// ```\nexport const removeRowClosestToPos = $pos => tr => {\n  const rect = findCellRectClosestToPos($pos);\n  if (rect) {\n    return removeRowAt(rect.top)(setTextSelection($pos.pos)(tr));\n  }\n  return tr;\n};\n\n// :: (columnIndex: number, cellTransform: (cell: {pos: number, start: number, node: ProseMirrorNode}, tr: Transaction) \u2192 Transaction, setCursorToLastCell: ?boolean) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that maps a given `cellTransform` function to each cell in a column at a given `columnIndex`.\n// It will set the selection into the last cell of the column if `setCursorToLastCell` param is set to `true`.\n//\n// ```javascript\n// dispatch(\n//   forEachCellInColumn(0, (cell, tr) => emptyCell(cell, state.schema)(tr))(state.tr)\n// );\n// ```\nexport const forEachCellInColumn = (\n  columnIndex,\n  cellTransform,\n  setCursorToLastCell\n) => tr => {\n  const cells = getCellsInColumn(columnIndex)(tr.selection);\n  if (cells) {\n    for (let i = cells.length - 1; i >= 0; i--) {\n      tr = cellTransform(cells[i], tr);\n    }\n    if (setCursorToLastCell) {\n      const $pos = tr.doc.resolve(tr.mapping.map(cells[cells.length - 1].pos));\n      tr.setSelection(Selection.near($pos));\n    }\n    return cloneTr(tr);\n  }\n  return tr;\n};\n\n// :: (rowIndex: number, cellTransform: (cell: {pos: number, start: number, node: ProseMirrorNode}, tr: Transaction) \u2192 Transaction, setCursorToLastCell: ?boolean) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that maps a given `cellTransform` function to each cell in a row at a given `rowIndex`.\n// It will set the selection into the last cell of the row if `setCursorToLastCell` param is set to `true`.\n//\n// ```javascript\n// dispatch(\n//   forEachCellInRow(0, (cell, tr) => setCellAttrs(cell, { background: 'red' })(tr))(state.tr)\n// );\n// ```\nexport const forEachCellInRow = (\n  rowIndex,\n  cellTransform,\n  setCursorToLastCell\n) => tr => {\n  const cells = getCellsInRow(rowIndex)(tr.selection);\n  if (cells) {\n    for (let i = cells.length - 1; i >= 0; i--) {\n      tr = cellTransform(cells[i], tr);\n    }\n    if (setCursorToLastCell) {\n      const $pos = tr.doc.resolve(tr.mapping.map(cells[cells.length - 1].pos));\n      tr.setSelection(Selection.near($pos));\n    }\n  }\n  return tr;\n};\n\n// :: (cell: {pos: number, start: number, node: ProseMirrorNode}, attrs: Object) \u2192 (tr: Transaction) \u2192 Transaction\n// Returns a new transaction that sets given `attrs` to a given `cell`.\n//\n// ```javascript\n// dispatch(\n//   setCellAttrs(findCellClosestToPos($pos), { background: 'blue' })(tr);\n// );\n// ```\nexport const setCellAttrs = (cell, attrs) => tr => {\n  if (cell) {\n    tr.setNodeMarkup(cell.pos, null, Object.assign({}, cell.node.attrs, attrs));\n    return cloneTr(tr);\n  }\n  return tr;\n};\n\n// :: (schema: Schema, rowsCount: ?number, colsCount: ?number, withHeaderRow: ?boolean, cellContent: ?Node) \u2192 Node\n// Returns a table node of a given size.\n// `withHeaderRow` defines whether the first row of the table will be a header row.\n// `cellContent` defines the content of each cell.\n//\n// ```javascript\n// const table = createTable(state.schema); // 3x3 table node\n// dispatch(\n//   tr.replaceSelectionWith(table).scrollIntoView()\n// );\n// ```\nexport const createTable = (\n  schema,\n  rowsCount = 3,\n  colsCount = 3,\n  withHeaderRow = true,\n  cellContent = null\n) => {\n  const {\n    cell: tableCell,\n    header_cell: tableHeader,\n    row: tableRow,\n    table\n  } = tableNodeTypes(schema);\n\n  const cells = [];\n  const headerCells = [];\n  for (let i = 0; i < colsCount; i++) {\n    cells.push(createCell(tableCell, cellContent));\n\n    if (withHeaderRow) {\n      headerCells.push(createCell(tableHeader, cellContent));\n    }\n  }\n\n  const rows = [];\n  for (let i = 0; i < rowsCount; i++) {\n    rows.push(\n      tableRow.createChecked(\n        null,\n        withHeaderRow && i === 0 ? headerCells : cells\n      )\n    );\n  }\n\n  return table.createChecked(null, rows);\n};\n\n// :: ($pos: ResolvedPos) \u2192 ?{pos: number, start: number, node: ProseMirrorNode}\n// Iterates over parent nodes, returning a table cell or a table header node closest to a given `$pos`.\n//\n// ```javascript\n// const cell = findCellClosestToPos(state.selection.$from);\n// ```\nexport const findCellClosestToPos = $pos => {\n  const predicate = node =>\n    node.type.spec.tableRole && /cell/i.test(node.type.spec.tableRole);\n  return findParentNodeClosestToPos($pos, predicate);\n};\n\n// :: ($pos: ResolvedPos) \u2192 ?{left: number, top: number, right: number, bottom: number}\n// Returns the rectangle spanning a cell closest to a given `$pos`.\n//\n// ```javascript\n// dispatch(\n//   findCellRectClosestToPos(state.selection.$from)\n// );\n// ```\nexport const findCellRectClosestToPos = $pos => {\n  const cell = findCellClosestToPos($pos);\n  if (cell) {\n    const table = findTableClosestToPos($pos);\n    const map = TableMap.get(table.node);\n    const cellPos = cell.pos - table.start;\n    return map.rectBetween(cellPos, cellPos);\n  }\n};\n\nconst filterCellsInRow = (rowIndex, predicate) => tr => {\n  let foundCells = [];\n  const cells = getCellsInRow(rowIndex)(tr.selection);\n  if (cells) {\n    for (let j = cells.length - 1; j >= 0; j--) {\n      if (predicate(cells[j], tr)) {\n        foundCells.push(cells[j]);\n      }\n    }\n  }\n\n  return foundCells;\n};\n\n// :: (columnIndex: number) \u2192 (tr: Transaction) \u2192 {$anchor: ResolvedPos, $head: ResolvedPos, indexes: [number]}\n// Returns a range of rectangular selection spanning all merged cells around a column at index `columnIndex`.\n//\n// ```javascript\n// const range = getSelectionRangeInColumn(3)(state.tr);\n// ```\nexport const getSelectionRangeInColumn = columnIndex => tr => {\n  let startIndex = columnIndex;\n  let endIndex = columnIndex;\n\n  // looking for selection start column (startIndex)\n  for (let i = columnIndex; i >= 0; i--) {\n    const cells = getCellsInColumn(i)(tr.selection);\n    if (cells) {\n      cells.forEach(cell => {\n        let maybeEndIndex = cell.node.attrs.colspan + i - 1;\n        if (maybeEndIndex >= startIndex) {\n          startIndex = i;\n        }\n        if (maybeEndIndex > endIndex) {\n          endIndex = maybeEndIndex;\n        }\n      });\n    }\n  }\n  // looking for selection end column (endIndex)\n  for (let i = columnIndex; i <= endIndex; i++) {\n    const cells = getCellsInColumn(i)(tr.selection);\n    if (cells) {\n      cells.forEach(cell => {\n        let maybeEndIndex = cell.node.attrs.colspan + i - 1;\n        if (cell.node.attrs.colspan > 1 && maybeEndIndex > endIndex) {\n          endIndex = maybeEndIndex;\n        }\n      });\n    }\n  }\n\n  // filter out columns without cells (where all rows have colspan > 1 in the same column)\n  const indexes = [];\n  for (let i = startIndex; i <= endIndex; i++) {\n    const maybeCells = getCellsInColumn(i)(tr.selection);\n    if (maybeCells && maybeCells.length) {\n      indexes.push(i);\n    }\n  }\n  startIndex = indexes[0];\n  endIndex = indexes[indexes.length - 1];\n\n  const firstSelectedColumnCells = getCellsInColumn(startIndex)(tr.selection);\n  const firstRowCells = getCellsInRow(0)(tr.selection);\n  const $anchor = tr.doc.resolve(\n    firstSelectedColumnCells[firstSelectedColumnCells.length - 1].pos\n  );\n\n  let headCell;\n  for (let i = endIndex; i >= startIndex; i--) {\n    const columnCells = getCellsInColumn(i)(tr.selection);\n    if (columnCells && columnCells.length) {\n      for (let j = firstRowCells.length - 1; j >= 0; j--) {\n        if (firstRowCells[j].pos === columnCells[0].pos) {\n          headCell = columnCells[0];\n          break;\n        }\n      }\n      if (headCell) {\n        break;\n      }\n    }\n  }\n\n  const $head = tr.doc.resolve(headCell.pos);\n  return { $anchor, $head, indexes };\n};\n\n// :: (rowIndex: number) \u2192 (tr: Transaction) \u2192 {$anchor: ResolvedPos, $head: ResolvedPos, indexes: [number]}\n// Returns a range of rectangular selection spanning all merged cells around a row at index `rowIndex`.\n//\n// ```javascript\n// const range = getSelectionRangeInRow(3)(state.tr);\n// ```\nexport const getSelectionRangeInRow = rowIndex => tr => {\n  let startIndex = rowIndex;\n  let endIndex = rowIndex;\n  // looking for selection start row (startIndex)\n  for (let i = rowIndex; i >= 0; i--) {\n    const cells = getCellsInRow(i)(tr.selection);\n    cells.forEach(cell => {\n      let maybeEndIndex = cell.node.attrs.rowspan + i - 1;\n      if (maybeEndIndex >= startIndex) {\n        startIndex = i;\n      }\n      if (maybeEndIndex > endIndex) {\n        endIndex = maybeEndIndex;\n      }\n    });\n  }\n  // looking for selection end row (endIndex)\n  for (let i = rowIndex; i <= endIndex; i++) {\n    const cells = getCellsInRow(i)(tr.selection);\n    cells.forEach(cell => {\n      let maybeEndIndex = cell.node.attrs.rowspan + i - 1;\n      if (cell.node.attrs.rowspan > 1 && maybeEndIndex > endIndex) {\n        endIndex = maybeEndIndex;\n      }\n    });\n  }\n\n  // filter out rows without cells (where all columns have rowspan > 1 in the same row)\n  const indexes = [];\n  for (let i = startIndex; i <= endIndex; i++) {\n    const maybeCells = getCellsInRow(i)(tr.selection);\n    if (maybeCells && maybeCells.length) {\n      indexes.push(i);\n    }\n  }\n  startIndex = indexes[0];\n  endIndex = indexes[indexes.length - 1];\n\n  const firstSelectedRowCells = getCellsInRow(startIndex)(tr.selection);\n  const firstColumnCells = getCellsInColumn(0)(tr.selection);\n  const $anchor = tr.doc.resolve(\n    firstSelectedRowCells[firstSelectedRowCells.length - 1].pos\n  );\n\n  let headCell;\n  for (let i = endIndex; i >= startIndex; i--) {\n    const rowCells = getCellsInRow(i)(tr.selection);\n    if (rowCells && rowCells.length) {\n      for (let j = firstColumnCells.length - 1; j >= 0; j--) {\n        if (firstColumnCells[j].pos === rowCells[0].pos) {\n          headCell = rowCells[0];\n          break;\n        }\n      }\n      if (headCell) {\n        break;\n      }\n    }\n  }\n\n  const $head = tr.doc.resolve(headCell.pos);\n  return { $anchor, $head, indexes };\n};\n", "export default require(\"../node_modules/prosemirror-utils/dist/index.js\");"],
  "mappings": "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",
  "names": []
}
