{
  "version": 3,
  "sources": ["../../../node_modules/refractor/lang/ruby.js", "dep:refractor_lang_ruby"],
  "sourcesContent": ["'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *     constant, builtin, variable, symbol, regex\n   */\n  ;(function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [\n        /#.*/,\n        {\n          pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n          greedy: true\n        }\n      ],\n      'class-name': {\n        pattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.\\\\]/\n        }\n      },\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/\n    })\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    }\n    delete Prism.languages.ruby.function\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [\n        {\n          pattern: RegExp(\n            /%r/.source +\n              '(?:' +\n              [\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/\n                  .source,\n                /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/.source, // Here we need to specifically allow interpolation\n                /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/.source,\n                /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/.source,\n                /<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/.source\n              ].join('|') +\n              ')'\n          ),\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*(?:$|[\\r\\n,.;})]))/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    })\n    Prism.languages.ruby.string = [\n      {\n        pattern: RegExp(\n          /%[qQiIwWxs]?/.source +\n            '(?:' +\n            [\n              /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n              /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source, // Here we need to specifically allow interpolation\n              /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,\n              /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,\n              /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source\n            ].join('|') +\n            ')'\n        ),\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }\n    ]\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n", "export default require(\"../node_modules/refractor/lang/ruby.js\");"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,SAAK,cAAc;AACnB,SAAK,UAAU,CAAC;AAChB,kBAAc,OAAO;AAOnB;AAAC,MAAC,UAAU,QAAO;AACjB,eAAM,UAAU,OAAO,OAAM,UAAU,OAAO,SAAS;AAAA,UACrD,SAAS;AAAA,YACP;AAAA,YACA;AAAA,cACE,SAAS;AAAA,cACT,QAAQ;AAAA;AAAA;AAAA,UAGZ,cAAc;AAAA,YACZ,SAAS;AAAA,YACT,YAAY;AAAA,YACZ,QAAQ;AAAA,cACN,aAAa;AAAA;AAAA;AAAA,UAGjB,SAAS;AAAA;AAEX,YAAI,gBAAgB;AAAA,UAClB,SAAS;AAAA,UACT,QAAQ;AAAA,YACN,WAAW;AAAA,cACT,SAAS;AAAA,cACT,OAAO;AAAA;AAAA,YAET,MAAM,OAAM,UAAU;AAAA;AAAA;AAG1B,eAAO,OAAM,UAAU,KAAK;AAC5B,eAAM,UAAU,aAAa,QAAQ,WAAW;AAAA,UAC9C,OAAO;AAAA,YACL;AAAA,cACE,SAAS,OACP,KAAK,SACH,QACA;AAAA,gBACE,6DACG;AAAA,gBACH,sCAAsC;AAAA,gBACtC,uDAAuD;AAAA,gBACvD,wCAAwC;AAAA,gBACxC,oCAAoC;AAAA,gBACpC,KAAK,OACP;AAAA,cAEJ,QAAQ;AAAA,cACR,QAAQ;AAAA,gBACN;AAAA;AAAA;AAAA,YAGJ;AAAA,cACE,SAAS;AAAA,cACT,YAAY;AAAA,cACZ,QAAQ;AAAA;AAAA;AAAA,UAGZ,UAAU;AAAA,UACV,QAAQ;AAAA,YACN,SAAS;AAAA,YACT,YAAY;AAAA;AAAA,UAEd,qBAAqB;AAAA,YACnB,SAAS;AAAA,YACT,YAAY;AAAA,YACZ,QAAQ;AAAA,cACN,UAAU;AAAA,cACV,MAAM,OAAM,UAAU;AAAA;AAAA;AAAA;AAI5B,eAAM,UAAU,aAAa,QAAQ,UAAU;AAAA,UAC7C,SAAS;AAAA,UACT,UAAU;AAAA;AAEZ,eAAM,UAAU,KAAK,SAAS;AAAA,UAC5B;AAAA,YACE,SAAS,OACP,eAAe,SACb,QACA;AAAA,cACE,mDAAmD;AAAA,cACnD,4BAA4B;AAAA,cAC5B,6CAA6C;AAAA,cAC7C,8BAA8B;AAAA,cAC9B,0BAA0B;AAAA,cAC1B,KAAK,OACP;AAAA,YAEJ,QAAQ;AAAA,YACR,QAAQ;AAAA,cACN;AAAA;AAAA;AAAA,UAGJ;AAAA,YACE,SAAS;AAAA,YACT,QAAQ;AAAA,YACR,QAAQ;AAAA,cACN;AAAA;AAAA;AAAA;AAIN,eAAM,UAAU,KAAK,OAAM,UAAU;AAAA,SACpC;AAAA;AAAA;AAAA;;;AClHL,IAAO,8BAAQ;",
  "names": []
}
