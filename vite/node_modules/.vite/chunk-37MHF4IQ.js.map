{
  "version": 3,
  "sources": ["../../../node_modules/prosemirror-state/src/selection.js", "../../../node_modules/prosemirror-state/src/transaction.js", "../../../node_modules/prosemirror-state/src/state.js", "../../../node_modules/prosemirror-state/src/plugin.js"],
  "sourcesContent": ["import {Slice, Fragment} from \"prosemirror-model\"\nimport {ReplaceStep, ReplaceAroundStep} from \"prosemirror-transform\"\n\nconst classesById = Object.create(null)\n\n// ::- Superclass for editor selections. Every selection type should\n// extend this. Should not be instantiated directly.\nexport class Selection {\n  // :: (ResolvedPos, ResolvedPos, ?[SelectionRange])\n  // Initialize a selection with the head and anchor and ranges. If no\n  // ranges are given, constructs a single range across `$anchor` and\n  // `$head`.\n  constructor($anchor, $head, ranges) {\n    // :: [SelectionRange]\n    // The ranges covered by the selection.\n    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))]\n    // :: ResolvedPos\n    // The resolved anchor of the selection (the side that stays in\n    // place when the selection is modified).\n    this.$anchor = $anchor\n    // :: ResolvedPos\n    // The resolved head of the selection (the side that moves when\n    // the selection is modified).\n    this.$head = $head\n  }\n\n  // :: number\n  // The selection's anchor, as an unresolved position.\n  get anchor() { return this.$anchor.pos }\n\n  // :: number\n  // The selection's head.\n  get head() { return this.$head.pos }\n\n  // :: number\n  // The lower bound of the selection's main range.\n  get from() { return this.$from.pos }\n\n  // :: number\n  // The upper bound of the selection's main range.\n  get to() { return this.$to.pos }\n\n  // :: ResolvedPos\n  // The resolved lower  bound of the selection's main range.\n  get $from() {\n    return this.ranges[0].$from\n  }\n\n  // :: ResolvedPos\n  // The resolved upper bound of the selection's main range.\n  get $to() {\n    return this.ranges[0].$to\n  }\n\n  // :: bool\n  // Indicates whether the selection contains any content.\n  get empty() {\n    let ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++)\n      if (ranges[i].$from.pos != ranges[i].$to.pos) return false\n    return true\n  }\n\n  // eq:: (Selection) \u2192 bool\n  // Test whether the selection is the same as another selection.\n\n  // map:: (doc: Node, mapping: Mappable) \u2192 Selection\n  // Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n  // should be the new document to which we are mapping.\n\n  // :: () \u2192 Slice\n  // Get the content of this selection as a slice.\n  content() {\n    return this.$from.node(0).slice(this.from, this.to, true)\n  }\n\n  // :: (Transaction, ?Slice)\n  // Replace the selection with a slice or, if no slice is given,\n  // delete the selection. Will append to the given transaction.\n  replace(tr, content = Slice.empty) {\n    // Put the new selection at the position after the inserted\n    // content. When that ended in an inline node, search backwards,\n    // to get the position after that node. If not, search forward.\n    let lastNode = content.content.lastChild, lastParent = null\n    for (let i = 0; i < content.openEnd; i++) {\n      lastParent = lastNode\n      lastNode = lastNode.lastChild\n    }\n\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content)\n      if (i == 0)\n        selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1)\n    }\n  }\n\n  // :: (Transaction, Node)\n  // Replace the selection with the given node, appending the changes\n  // to the given transaction.\n  replaceWith(tr, node) {\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      let from = mapping.map($from.pos), to = mapping.map($to.pos)\n      if (i) {\n        tr.deleteRange(from, to)\n      } else {\n        tr.replaceRangeWith(from, to, node)\n        selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1)\n      }\n    }\n  }\n\n  // toJSON:: () \u2192 Object\n  // Convert the selection to a JSON representation. When implementing\n  // this for a custom selection class, make sure to give the object a\n  // `type` property whose value matches the ID under which you\n  // [registered](#state.Selection^jsonID) your class.\n\n  // :: (ResolvedPos, number, ?bool) \u2192 ?Selection\n  // Find a valid cursor or leaf node selection starting at the given\n  // position and searching back if `dir` is negative, and forward if\n  // positive. When `textOnly` is true, only consider cursor\n  // selections. Will return null when no valid selection position is\n  // found.\n  static findFrom($pos, dir, textOnly) {\n    let inner = $pos.parent.inlineContent ? new TextSelection($pos)\n        : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly)\n    if (inner) return inner\n\n    for (let depth = $pos.depth - 1; depth >= 0; depth--) {\n      let found = dir < 0\n          ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)\n          : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly)\n      if (found) return found\n    }\n  }\n\n  // :: (ResolvedPos, ?number) \u2192 Selection\n  // Find a valid cursor or leaf node selection near the given\n  // position. Searches forward first by default, but if `bias` is\n  // negative, it will search backwards first.\n  static near($pos, bias = 1) {\n    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0))\n  }\n\n  // :: (Node) \u2192 Selection\n  // Find the cursor or leaf node selection closest to the start of\n  // the given document. Will return an\n  // [`AllSelection`](#state.AllSelection) if no valid position\n  // exists.\n  static atStart(doc) {\n    return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc)\n  }\n\n  // :: (Node) \u2192 Selection\n  // Find the cursor or leaf node selection closest to the end of the\n  // given document.\n  static atEnd(doc) {\n    return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc)\n  }\n\n  // :: (Node, Object) \u2192 Selection\n  // Deserialize the JSON representation of a selection. Must be\n  // implemented for custom classes (as a static class method).\n  static fromJSON(doc, json) {\n    if (!json || !json.type) throw new RangeError(\"Invalid input for Selection.fromJSON\")\n    let cls = classesById[json.type]\n    if (!cls) throw new RangeError(`No selection type ${json.type} defined`)\n    return cls.fromJSON(doc, json)\n  }\n\n  // :: (string, constructor<Selection>)\n  // To be able to deserialize selections from JSON, custom selection\n  // classes must register themselves with an ID string, so that they\n  // can be disambiguated. Try to pick something that's unlikely to\n  // clash with classes from other modules.\n  static jsonID(id, selectionClass) {\n    if (id in classesById) throw new RangeError(\"Duplicate use of selection JSON ID \" + id)\n    classesById[id] = selectionClass\n    selectionClass.prototype.jsonID = id\n    return selectionClass\n  }\n\n  // :: () \u2192 SelectionBookmark\n  // Get a [bookmark](#state.SelectionBookmark) for this selection,\n  // which is a value that can be mapped without having access to a\n  // current document, and later resolved to a real selection for a\n  // given document again. (This is used mostly by the history to\n  // track and restore old selections.) The default implementation of\n  // this method just converts the selection to a text selection and\n  // returns the bookmark for that.\n  getBookmark() {\n    return TextSelection.between(this.$anchor, this.$head).getBookmark()\n  }\n}\n\n// :: bool\n// Controls whether, when a selection of this type is active in the\n// browser, the selected range should be visible to the user. Defaults\n// to `true`.\nSelection.prototype.visible = true\n\n// SelectionBookmark:: interface\n// A lightweight, document-independent representation of a selection.\n// You can define a custom bookmark type for a custom selection class\n// to make the history handle it well.\n//\n//   map:: (mapping: Mapping) \u2192 SelectionBookmark\n//   Map the bookmark through a set of changes.\n//\n//   resolve:: (doc: Node) \u2192 Selection\n//   Resolve the bookmark to a real selection again. This may need to\n//   do some error checking and may fall back to a default (usually\n//   [`TextSelection.between`](#state.TextSelection^between)) if\n//   mapping made the bookmark invalid.\n\n// ::- Represents a selected range in a document.\nexport class SelectionRange {\n  // :: (ResolvedPos, ResolvedPos)\n  constructor($from, $to) {\n    // :: ResolvedPos\n    // The lower bound of the range.\n    this.$from = $from\n    // :: ResolvedPos\n    // The upper bound of the range.\n    this.$to = $to\n  }\n}\n\n// ::- A text selection represents a classical editor selection, with\n// a head (the moving side) and anchor (immobile side), both of which\n// point into textblock nodes. It can be empty (a regular cursor\n// position).\nexport class TextSelection extends Selection {\n  // :: (ResolvedPos, ?ResolvedPos)\n  // Construct a text selection between the given points.\n  constructor($anchor, $head = $anchor) {\n    super($anchor, $head)\n  }\n\n  // :: ?ResolvedPos\n  // Returns a resolved position if this is a cursor selection (an\n  // empty text selection), and null otherwise.\n  get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null }\n\n  map(doc, mapping) {\n    let $head = doc.resolve(mapping.map(this.head))\n    if (!$head.parent.inlineContent) return Selection.near($head)\n    let $anchor = doc.resolve(mapping.map(this.anchor))\n    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head)\n  }\n\n  replace(tr, content = Slice.empty) {\n    super.replace(tr, content)\n    if (content == Slice.empty) {\n      let marks = this.$from.marksAcross(this.$to)\n      if (marks) tr.ensureMarks(marks)\n    }\n  }\n\n  eq(other) {\n    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head\n  }\n\n  getBookmark() {\n    return new TextBookmark(this.anchor, this.head)\n  }\n\n  toJSON() {\n    return {type: \"text\", anchor: this.anchor, head: this.head}\n  }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\" || typeof json.head != \"number\")\n      throw new RangeError(\"Invalid input for TextSelection.fromJSON\")\n    return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head))\n  }\n\n  // :: (Node, number, ?number) \u2192 TextSelection\n  // Create a text selection from non-resolved positions.\n  static create(doc, anchor, head = anchor) {\n    let $anchor = doc.resolve(anchor)\n    return new this($anchor, head == anchor ? $anchor : doc.resolve(head))\n  }\n\n  // :: (ResolvedPos, ResolvedPos, ?number) \u2192 Selection\n  // Return a text selection that spans the given positions or, if\n  // they aren't text positions, find a text selection near them.\n  // `bias` determines whether the method searches forward (default)\n  // or backwards (negative number) first. Will fall back to calling\n  // [`Selection.near`](#state.Selection^near) when the document\n  // doesn't contain a valid text position.\n  static between($anchor, $head, bias) {\n    let dPos = $anchor.pos - $head.pos\n    if (!bias || dPos) bias = dPos >= 0 ? 1 : -1\n    if (!$head.parent.inlineContent) {\n      let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true)\n      if (found) $head = found.$head\n      else return Selection.near($head, bias)\n    }\n    if (!$anchor.parent.inlineContent) {\n      if (dPos == 0) {\n        $anchor = $head\n      } else {\n        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor\n        if (($anchor.pos < $head.pos) != (dPos < 0)) $anchor = $head\n      }\n    }\n    return new TextSelection($anchor, $head)\n  }\n}\n\nSelection.jsonID(\"text\", TextSelection)\n\nclass TextBookmark {\n  constructor(anchor, head) {\n    this.anchor = anchor\n    this.head = head\n  }\n  map(mapping) {\n    return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head))\n  }\n  resolve(doc) {\n    return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head))\n  }\n}\n\n// ::- A node selection is a selection that points at a single node.\n// All nodes marked [selectable](#model.NodeSpec.selectable) can be\n// the target of a node selection. In such a selection, `from` and\n// `to` point directly before and after the selected node, `anchor`\n// equals `from`, and `head` equals `to`..\nexport class NodeSelection extends Selection {\n  // :: (ResolvedPos)\n  // Create a node selection. Does not verify the validity of its\n  // argument.\n  constructor($pos) {\n    let node = $pos.nodeAfter\n    let $end = $pos.node(0).resolve($pos.pos + node.nodeSize)\n    super($pos, $end)\n    // :: Node The selected node.\n    this.node = node\n  }\n\n  map(doc, mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    let $pos = doc.resolve(pos)\n    if (deleted) return Selection.near($pos)\n    return new NodeSelection($pos)\n  }\n\n  content() {\n    return new Slice(Fragment.from(this.node), 0, 0)\n  }\n\n  eq(other) {\n    return other instanceof NodeSelection && other.anchor == this.anchor\n  }\n\n  toJSON() {\n    return {type: \"node\", anchor: this.anchor}\n  }\n\n  getBookmark() { return new NodeBookmark(this.anchor) }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\")\n      throw new RangeError(\"Invalid input for NodeSelection.fromJSON\")\n    return new NodeSelection(doc.resolve(json.anchor))\n  }\n\n  // :: (Node, number) \u2192 NodeSelection\n  // Create a node selection from non-resolved positions.\n  static create(doc, from) {\n    return new this(doc.resolve(from))\n  }\n\n  // :: (Node) \u2192 bool\n  // Determines whether the given node may be selected as a node\n  // selection.\n  static isSelectable(node) {\n    return !node.isText && node.type.spec.selectable !== false\n  }\n}\n\nNodeSelection.prototype.visible = false\n\nSelection.jsonID(\"node\", NodeSelection)\n\nclass NodeBookmark {\n  constructor(anchor) {\n    this.anchor = anchor\n  }\n  map(mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos)\n  }\n  resolve(doc) {\n    let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter\n    if (node && NodeSelection.isSelectable(node)) return new NodeSelection($pos)\n    return Selection.near($pos)\n  }\n}\n\n// ::- A selection type that represents selecting the whole document\n// (which can not necessarily be expressed with a text selection, when\n// there are for example leaf block nodes at the start or end of the\n// document).\nexport class AllSelection extends Selection {\n  // :: (Node)\n  // Create an all-selection over the given document.\n  constructor(doc) {\n    super(doc.resolve(0), doc.resolve(doc.content.size))\n  }\n\n  replace(tr, content = Slice.empty) {\n    if (content == Slice.empty) {\n      tr.delete(0, tr.doc.content.size)\n      let sel = Selection.atStart(tr.doc)\n      if (!sel.eq(tr.selection)) tr.setSelection(sel)\n    } else {\n      super.replace(tr, content)\n    }\n  }\n\n  toJSON() { return {type: \"all\"} }\n\n  static fromJSON(doc) { return new AllSelection(doc) }\n\n  map(doc) { return new AllSelection(doc) }\n\n  eq(other) { return other instanceof AllSelection }\n\n  getBookmark() { return AllBookmark }\n}\n\nSelection.jsonID(\"all\", AllSelection)\n\nconst AllBookmark = {\n  map() { return this },\n  resolve(doc) { return new AllSelection(doc) }\n}\n\n// FIXME we'll need some awareness of text direction when scanning for selections\n\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\nfunction findSelectionIn(doc, node, pos, index, dir, text) {\n  if (node.inlineContent) return TextSelection.create(doc, pos)\n  for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    let child = node.child(i)\n    if (!child.isAtom) {\n      let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text)\n      if (inner) return inner\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0))\n    }\n    pos += child.nodeSize * dir\n  }\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  let last = tr.steps.length - 1\n  if (last < startLen) return\n  let step = tr.steps[last]\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) return\n  let map = tr.mapping.maps[last], end\n  map.forEach((_from, _to, _newFrom, newTo) => { if (end == null) end = newTo })\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n", "import {Transform} from \"prosemirror-transform\"\nimport {Mark} from \"prosemirror-model\"\nimport {Selection} from \"./selection\"\n\nconst UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4\n\n// ::- An editor state transaction, which can be applied to a state to\n// create an updated state. Use\n// [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n//\n// Transactions track changes to the document (they are a subclass of\n// [`Transform`](#transform.Transform)), but also other state changes,\n// like selection updates and adjustments of the set of [stored\n// marks](#state.EditorState.storedMarks). In addition, you can store\n// metadata properties in a transaction, which are extra pieces of\n// information that client code or plugins can use to describe what a\n// transacion represents, so that they can update their [own\n// state](#state.StateField) accordingly.\n//\n// The [editor view](#view.EditorView) uses a few metadata properties:\n// it will attach a property `\"pointer\"` with the value `true` to\n// selection transactions directly caused by mouse or touch input, and\n// a `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\nexport class Transaction extends Transform {\n  constructor(state) {\n    super(state.doc)\n    // :: number\n    // The timestamp associated with this transaction, in the same\n    // format as `Date.now()`.\n    this.time = Date.now()\n    this.curSelection = state.selection\n    // The step count for which the current selection is valid.\n    this.curSelectionFor = 0\n    // :: ?[Mark]\n    // The stored marks set by this transaction, if any.\n    this.storedMarks = state.storedMarks\n    // Bitfield to track which aspects of the state were updated by\n    // this transaction.\n    this.updated = 0\n    // Object used to store metadata properties for the transaction.\n    this.meta = Object.create(null)\n  }\n\n  // :: Selection\n  // The transaction's current selection. This defaults to the editor\n  // selection [mapped](#state.Selection.map) through the steps in the\n  // transaction, but can be overwritten with\n  // [`setSelection`](#state.Transaction.setSelection).\n  get selection() {\n    if (this.curSelectionFor < this.steps.length) {\n      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor))\n      this.curSelectionFor = this.steps.length\n    }\n    return this.curSelection\n  }\n\n  // :: (Selection) \u2192 Transaction\n  // Update the transaction's current selection. Will determine the\n  // selection that the editor gets when the transaction is applied.\n  setSelection(selection) {\n    if (selection.$from.doc != this.doc)\n      throw new RangeError(\"Selection passed to setSelection must point at the current document\")\n    this.curSelection = selection\n    this.curSelectionFor = this.steps.length\n    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS\n    this.storedMarks = null\n    return this\n  }\n\n  // :: bool\n  // Whether the selection was explicitly updated by this transaction.\n  get selectionSet() {\n    return (this.updated & UPDATED_SEL) > 0\n  }\n\n  // :: (?[Mark]) \u2192 Transaction\n  // Set the current stored marks.\n  setStoredMarks(marks) {\n    this.storedMarks = marks\n    this.updated |= UPDATED_MARKS\n    return this\n  }\n\n  // :: ([Mark]) \u2192 Transaction\n  // Make sure the current stored marks or, if that is null, the marks\n  // at the selection, match the given set of marks. Does nothing if\n  // this is already the case.\n  ensureMarks(marks) {\n    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))\n      this.setStoredMarks(marks)\n    return this\n  }\n\n  // :: (Mark) \u2192 Transaction\n  // Add a mark to the set of stored marks.\n  addStoredMark(mark) {\n    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: (union<Mark, MarkType>) \u2192 Transaction\n  // Remove a mark or mark type from the set of stored marks.\n  removeStoredMark(mark) {\n    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: bool\n  // Whether the stored marks were explicitly set for this transaction.\n  get storedMarksSet() {\n    return (this.updated & UPDATED_MARKS) > 0\n  }\n\n  addStep(step, doc) {\n    super.addStep(step, doc)\n    this.updated = this.updated & ~UPDATED_MARKS\n    this.storedMarks = null\n  }\n\n  // :: (number) \u2192 Transaction\n  // Update the timestamp for the transaction.\n  setTime(time) {\n    this.time = time\n    return this\n  }\n\n  // :: (Slice) \u2192 Transaction\n  // Replace the current selection with the given slice.\n  replaceSelection(slice) {\n    this.selection.replace(this, slice)\n    return this\n  }\n\n  // :: (Node, ?bool) \u2192 Transaction\n  // Replace the selection with the given node. When `inheritMarks` is\n  // true and the content is inline, it inherits the marks from the\n  // place where it is inserted.\n  replaceSelectionWith(node, inheritMarks) {\n    let selection = this.selection\n    if (inheritMarks !== false)\n      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)))\n    selection.replaceWith(this, node)\n    return this\n  }\n\n  // :: () \u2192 Transaction\n  // Delete the selection.\n  deleteSelection() {\n    this.selection.replace(this)\n    return this\n  }\n\n  // :: (string, from: ?number, to: ?number) \u2192 Transaction\n  // Replace the given range, or the selection if no range is given,\n  // with a text node containing the given string.\n  insertText(text, from, to = from) {\n    let schema = this.doc.type.schema\n    if (from == null) {\n      if (!text) return this.deleteSelection()\n      return this.replaceSelectionWith(schema.text(text), true)\n    } else {\n      if (!text) return this.deleteRange(from, to)\n      let marks = this.storedMarks\n      if (!marks) {\n        let $from = this.doc.resolve(from)\n        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to))\n      }\n      this.replaceRangeWith(from, to, schema.text(text, marks))\n      if (!this.selection.empty) this.setSelection(Selection.near(this.selection.$to))\n      return this\n    }\n  }\n\n  // :: (union<string, Plugin, PluginKey>, any) \u2192 Transaction\n  // Store a metadata property in this transaction, keyed either by\n  // name or by plugin.\n  setMeta(key, value) {\n    this.meta[typeof key == \"string\" ? key : key.key] = value\n    return this\n  }\n\n  // :: (union<string, Plugin, PluginKey>) \u2192 any\n  // Retrieve a metadata property for a given name or plugin.\n  getMeta(key) {\n    return this.meta[typeof key == \"string\" ? key : key.key]\n  }\n\n  // :: bool\n  // Returns true if this transaction doesn't contain any metadata,\n  // and can thus safely be extended.\n  get isGeneric() {\n    for (let _ in this.meta) return false\n    return true\n  }\n\n  // :: () \u2192 Transaction\n  // Indicate that the editor should scroll the selection into view\n  // when updated to the state produced by this transaction.\n  scrollIntoView() {\n    this.updated |= UPDATED_SCROLL\n    return this\n  }\n\n  get scrolledIntoView() {\n    return (this.updated & UPDATED_SCROLL) > 0\n  }\n}\n", "import {Node} from \"prosemirror-model\"\n\nimport {Selection} from \"./selection\"\nimport {Transaction} from \"./transaction\"\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self)\n}\n\nclass FieldDesc {\n  constructor(name, desc, self) {\n    this.name = name\n    this.init = bind(desc.init, self)\n    this.apply = bind(desc.apply, self)\n  }\n}\n\nconst baseFields = [\n  new FieldDesc(\"doc\", {\n    init(config) { return config.doc || config.schema.topNodeType.createAndFill() },\n    apply(tr) { return tr.doc }\n  }),\n\n  new FieldDesc(\"selection\", {\n    init(config, instance) { return config.selection || Selection.atStart(instance.doc) },\n    apply(tr) { return tr.selection }\n  }),\n\n  new FieldDesc(\"storedMarks\", {\n    init(config) { return config.storedMarks || null },\n    apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null }\n  }),\n\n  new FieldDesc(\"scrollToSelection\", {\n    init() { return 0 },\n    apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev }\n  })\n]\n\n// Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\nclass Configuration {\n  constructor(schema, plugins) {\n    this.schema = schema\n    this.fields = baseFields.concat()\n    this.plugins = []\n    this.pluginsByKey = Object.create(null)\n    if (plugins) plugins.forEach(plugin => {\n      if (this.pluginsByKey[plugin.key])\n        throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\")\n      this.plugins.push(plugin)\n      this.pluginsByKey[plugin.key] = plugin\n      if (plugin.spec.state)\n        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin))\n    })\n  }\n}\n\n// ::- The state of a ProseMirror editor is represented by an object\n// of this type. A state is a persistent data structure\u2014it isn't\n// updated, but rather a new state value is computed from an old one\n// using the [`apply`](#state.EditorState.apply) method.\n//\n// A state holds a number of built-in fields, and plugins can\n// [define](#state.PluginSpec.state) additional fields.\nexport class EditorState {\n  constructor(config) {\n    this.config = config\n  }\n\n  // doc:: Node\n  // The current document.\n\n  // selection:: Selection\n  // The selection.\n\n  // storedMarks:: ?[Mark]\n  // A set of marks to apply to the next input. Will be null when\n  // no explicit marks have been set.\n\n  // :: Schema\n  // The schema of the state's document.\n  get schema() {\n    return this.config.schema\n  }\n\n  // :: [Plugin]\n  // The plugins that are active in this state.\n  get plugins() {\n    return this.config.plugins\n  }\n\n  // :: (Transaction) \u2192 EditorState\n  // Apply the given transaction to produce a new state.\n  apply(tr) {\n    return this.applyTransaction(tr).state\n  }\n\n  // : (Transaction) \u2192 bool\n  filterTransaction(tr, ignore = -1) {\n    for (let i = 0; i < this.config.plugins.length; i++) if (i != ignore) {\n      let plugin = this.config.plugins[i]\n      if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))\n        return false\n    }\n    return true\n  }\n\n  // :: (Transaction) \u2192 {state: EditorState, transactions: [Transaction]}\n  // Verbose variant of [`apply`](#state.EditorState.apply) that\n  // returns the precise transactions that were applied (which might\n  // be influenced by the [transaction\n  // hooks](#state.PluginSpec.filterTransaction) of\n  // plugins) along with the new state.\n  applyTransaction(rootTr) {\n    if (!this.filterTransaction(rootTr)) return {state: this, transactions: []}\n\n    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null\n    // This loop repeatedly gives plugins a chance to respond to\n    // transactions as new transactions are added, making sure to only\n    // pass the transactions the plugin did not see before.\n    outer: for (;;) {\n      let haveNew = false\n      for (let i = 0; i < this.config.plugins.length; i++) {\n        let plugin = this.config.plugins[i]\n        if (plugin.spec.appendTransaction) {\n          let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this\n          let tr = n < trs.length &&\n              plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState)\n          if (tr && newState.filterTransaction(tr, i)) {\n            tr.setMeta(\"appendedTransaction\", rootTr)\n            if (!seen) {\n              seen = []\n              for (let j = 0; j < this.config.plugins.length; j++)\n                seen.push(j < i ? {state: newState, n: trs.length} : {state: this, n: 0})\n            }\n            trs.push(tr)\n            newState = newState.applyInner(tr)\n            haveNew = true\n          }\n          if (seen) seen[i] = {state: newState, n: trs.length}\n        }\n      }\n      if (!haveNew) return {state: newState, transactions: trs}\n    }\n  }\n\n  // : (Transaction) \u2192 EditorState\n  applyInner(tr) {\n    if (!tr.before.eq(this.doc)) throw new RangeError(\"Applying a mismatched transaction\")\n    let newInstance = new EditorState(this.config), fields = this.config.fields\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i]\n      newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance)\n    }\n    for (let i = 0; i < applyListeners.length; i++) applyListeners[i](this, tr, newInstance)\n    return newInstance\n  }\n\n  // :: Transaction\n  // Start a [transaction](#state.Transaction) from this state.\n  get tr() { return new Transaction(this) }\n\n  // :: (Object) \u2192 EditorState\n  // Create a new state.\n  //\n  //   config::- Configuration options. Must contain `schema` or `doc` (or both).\n  //\n  //      schema:: ?Schema\n  //      The schema to use (only relevant if no `doc` is specified).\n  //\n  //      doc:: ?Node\n  //      The starting document.\n  //\n  //      selection:: ?Selection\n  //      A valid selection in the document.\n  //\n  //      storedMarks:: ?[Mark]\n  //      The initial set of [stored marks](#state.EditorState.storedMarks).\n  //\n  //      plugins:: ?[Plugin]\n  //      The plugins that should be active in this state.\n  static create(config) {\n    let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins)\n    let instance = new EditorState($config)\n    for (let i = 0; i < $config.fields.length; i++)\n      instance[$config.fields[i].name] = $config.fields[i].init(config, instance)\n    return instance\n  }\n\n  // :: (Object) \u2192 EditorState\n  // Create a new state based on this one, but with an adjusted set of\n  // active plugins. State fields that exist in both sets of plugins\n  // are kept unchanged. Those that no longer exist are dropped, and\n  // those that are new are initialized using their\n  // [`init`](#state.StateField.init) method, passing in the new\n  // configuration object..\n  //\n  //   config::- configuration options\n  //\n  //     plugins:: [Plugin]\n  //     New set of active plugins.\n  reconfigure(config) {\n    let $config = new Configuration(this.schema, config.plugins)\n    let fields = $config.fields, instance = new EditorState($config)\n    for (let i = 0; i < fields.length; i++) {\n      let name = fields[i].name\n      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance)\n    }\n    return instance\n  }\n\n  // :: (?union<Object<Plugin>, string, number>) \u2192 Object\n  // Serialize this state to JSON. If you want to serialize the state\n  // of plugins, pass an object mapping property names to use in the\n  // resulting JSON object to plugin objects. The argument may also be\n  // a string or number, in which case it is ignored, to support the\n  // way `JSON.stringify` calls `toString` methods.\n  toJSON(pluginFields) {\n    let result = {doc: this.doc.toJSON(), selection: this.selection.toJSON()}\n    if (this.storedMarks) result.storedMarks = this.storedMarks.map(m => m.toJSON())\n    if (pluginFields && typeof pluginFields == 'object') for (let prop in pluginFields) {\n      if (prop == \"doc\" || prop == \"selection\")\n        throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\")\n      let plugin = pluginFields[prop], state = plugin.spec.state\n      if (state && state.toJSON) result[prop] = state.toJSON.call(plugin, this[plugin.key])\n    }\n    return result\n  }\n\n  // :: (Object, Object, ?Object<Plugin>) \u2192 EditorState\n  // Deserialize a JSON representation of a state. `config` should\n  // have at least a `schema` field, and should contain array of\n  // plugins to initialize the state with. `pluginFields` can be used\n  // to deserialize the state of plugins, by associating plugin\n  // instances with the property names they use in the JSON object.\n  //\n  //   config::- configuration options\n  //\n  //     schema:: Schema\n  //     The schema to use.\n  //\n  //     plugins:: ?[Plugin]\n  //     The set of active plugins.\n  static fromJSON(config, json, pluginFields) {\n    if (!json) throw new RangeError(\"Invalid input for EditorState.fromJSON\")\n    if (!config.schema) throw new RangeError(\"Required config field 'schema' missing\")\n    let $config = new Configuration(config.schema, config.plugins)\n    let instance = new EditorState($config)\n    $config.fields.forEach(field => {\n      if (field.name == \"doc\") {\n        instance.doc = Node.fromJSON(config.schema, json.doc)\n      } else if (field.name == \"selection\") {\n        instance.selection = Selection.fromJSON(instance.doc, json.selection)\n      } else if (field.name == \"storedMarks\") {\n        if (json.storedMarks) instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON)\n      } else {\n        if (pluginFields) for (let prop in pluginFields) {\n          let plugin = pluginFields[prop], state = plugin.spec.state\n          if (plugin.key == field.name && state && state.fromJSON &&\n              Object.prototype.hasOwnProperty.call(json, prop)) {\n            // This field belongs to a plugin mapped to a JSON field, read it from there.\n            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance)\n            return\n          }\n        }\n        instance[field.name] = field.init(config, instance)\n      }\n    })\n    return instance\n  }\n\n  // Kludge to allow the view to track mappings between different\n  // instances of a state.\n  //\n  // FIXME this is no longer needed as of prosemirror-view 1.9.0,\n  // though due to backwards-compat we should probably keep it around\n  // for a while (if only as a no-op)\n  static addApplyListener(f) {\n    applyListeners.push(f)\n  }\n  static removeApplyListener(f) {\n    let found = applyListeners.indexOf(f)\n    if (found > -1) applyListeners.splice(found, 1)\n  }\n}\n\nconst applyListeners = []\n", "// PluginSpec:: interface\n//\n// This is the type passed to the [`Plugin`](#state.Plugin)\n// constructor. It provides a definition for a plugin.\n//\n//   props:: ?EditorProps\n//   The [view props](#view.EditorProps) added by this plugin. Props\n//   that are functions will be bound to have the plugin instance as\n//   their `this` binding.\n//\n//   state:: ?StateField<any>\n//   Allows a plugin to define a [state field](#state.StateField), an\n//   extra slot in the state object in which it can keep its own data.\n//\n//   key:: ?PluginKey\n//   Can be used to make this a keyed plugin. You can have only one\n//   plugin with a given key in a given state, but it is possible to\n//   access the plugin's configuration and state through the key,\n//   without having access to the plugin instance object.\n//\n//   view:: ?(EditorView) \u2192 Object\n//   When the plugin needs to interact with the editor view, or\n//   set something up in the DOM, use this field. The function\n//   will be called when the plugin's state is associated with an\n//   editor view.\n//\n//     return::-\n//     Should return an object with the following optional\n//     properties:\n//\n//       update:: ?(view: EditorView, prevState: EditorState)\n//       Called whenever the view's state is updated.\n//\n//       destroy:: ?()\n//       Called when the view is destroyed or receives a state\n//       with different plugins.\n//\n//   filterTransaction:: ?(Transaction, EditorState) \u2192 bool\n//   When present, this will be called before a transaction is\n//   applied by the state, allowing the plugin to cancel it (by\n//   returning false).\n//\n//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) \u2192 ?Transaction\n//   Allows the plugin to append another transaction to be applied\n//   after the given array of transactions. When another plugin\n//   appends a transaction after this was called, it is called again\n//   with the new state and new transactions\u2014but only the new\n//   transactions, i.e. it won't be passed transactions that it\n//   already saw.\n\nfunction bindProps(obj, self, target) {\n  for (let prop in obj) {\n    let val = obj[prop]\n    if (val instanceof Function) val = val.bind(self)\n    else if (prop == \"handleDOMEvents\") val = bindProps(val, self, {})\n    target[prop] = val\n  }\n  return target\n}\n\n// ::- Plugins bundle functionality that can be added to an editor.\n// They are part of the [editor state](#state.EditorState) and\n// may influence that state and the view that contains it.\nexport class Plugin {\n  // :: (PluginSpec)\n  // Create a plugin.\n  constructor(spec) {\n    // :: EditorProps\n    // The [props](#view.EditorProps) exported by this plugin.\n    this.props = {}\n    if (spec.props) bindProps(spec.props, this, this.props)\n    // :: Object\n    // The plugin's [spec object](#state.PluginSpec).\n    this.spec = spec\n    this.key = spec.key ? spec.key.key : createKey(\"plugin\")\n  }\n\n  // :: (EditorState) \u2192 any\n  // Extract the plugin's state field from an editor state.\n  getState(state) { return state[this.key] }\n}\n\n// StateField:: interface<T>\n// A plugin spec may provide a state field (under its\n// [`state`](#state.PluginSpec.state) property) of this type, which\n// describes the state it wants to keep. Functions provided here are\n// always called with the plugin instance as their `this` binding.\n//\n//   init:: (config: Object, instance: EditorState) \u2192 T\n//   Initialize the value of the field. `config` will be the object\n//   passed to [`EditorState.create`](#state.EditorState^create). Note\n//   that `instance` is a half-initialized state instance, and will\n//   not have values for plugin fields initialized after this one.\n//\n//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) \u2192 T\n//   Apply the given transaction to this state field, producing a new\n//   field value. Note that the `newState` argument is again a partially\n//   constructed state does not yet contain the state from plugins\n//   coming after this one.\n//\n//   toJSON:: ?(value: T) \u2192 *\n//   Convert this field to JSON. Optional, can be left off to disable\n//   JSON serialization for the field.\n//\n//   fromJSON:: ?(config: Object, value: *, state: EditorState) \u2192 T\n//   Deserialize the JSON representation of this field. Note that the\n//   `state` argument is again a half-initialized state.\n\nconst keys = Object.create(null)\n\nfunction createKey(name) {\n  if (name in keys) return name + \"$\" + ++keys[name]\n  keys[name] = 0\n  return name + \"$\"\n}\n\n// ::- A key is used to [tag](#state.PluginSpec.key)\n// plugins in a way that makes it possible to find them, given an\n// editor state. Assigning a key does mean only one plugin of that\n// type can be active in a state.\nexport class PluginKey {\n  // :: (?string)\n  // Create a plugin key.\n  constructor(name = \"key\") { this.key = createKey(name) }\n\n  // :: (EditorState) \u2192 ?Plugin\n  // Get the active plugin with this key, if any, from an editor\n  // state.\n  get(state) { return state.config.pluginsByKey[this.key] }\n\n  // :: (EditorState) \u2192 ?any\n  // Get the plugin's state from an editor state.\n  getState(state) { return state[this.key] }\n}\n"],
  "mappings": "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",
  "names": []
}
