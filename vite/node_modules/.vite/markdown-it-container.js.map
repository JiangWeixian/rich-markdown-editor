{
  "version": 3,
  "sources": ["../../../node_modules/markdown-it-container/index.js", "dep:markdown-it-container"],
  "sourcesContent": ["// Process block-level custom containers\n//\n'use strict';\n\n\nmodule.exports = function container_plugin(md, name, options) {\n\n  // Second param may be useful if you decide\n  // to increase minimal allowed marker length\n  function validateDefault(params/*, markup*/) {\n    return params.trim().split(' ', 2)[0] === name;\n  }\n\n  function renderDefault(tokens, idx, _options, env, slf) {\n\n    // add a class to the opening tag\n    if (tokens[idx].nesting === 1) {\n      tokens[idx].attrJoin('class', name);\n    }\n\n    return slf.renderToken(tokens, idx, _options, env, slf);\n  }\n\n  options = options || {};\n\n  var min_markers = 3,\n      marker_str  = options.marker || ':',\n      marker_char = marker_str.charCodeAt(0),\n      marker_len  = marker_str.length,\n      validate    = options.validate || validateDefault,\n      render      = options.render || renderDefault;\n\n  function container(state, startLine, endLine, silent) {\n    var pos, nextLine, marker_count, markup, params, token,\n        old_parent, old_line_max,\n        auto_closed = false,\n        start = state.bMarks[startLine] + state.tShift[startLine],\n        max = state.eMarks[startLine];\n\n    // Check out the first character quickly,\n    // this should filter out most of non-containers\n    //\n    if (marker_char !== state.src.charCodeAt(start)) { return false; }\n\n    // Check out the rest of the marker string\n    //\n    for (pos = start + 1; pos <= max; pos++) {\n      if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {\n        break;\n      }\n    }\n\n    marker_count = Math.floor((pos - start) / marker_len);\n    if (marker_count < min_markers) { return false; }\n    pos -= (pos - start) % marker_len;\n\n    markup = state.src.slice(start, pos);\n    params = state.src.slice(pos, max);\n    if (!validate(params, markup)) { return false; }\n\n    // Since start is found, we can report success here in validation mode\n    //\n    if (silent) { return true; }\n\n    // Search for the end of the block\n    //\n    nextLine = startLine;\n\n    for (;;) {\n      nextLine++;\n      if (nextLine >= endLine) {\n        // unclosed block should be autoclosed by end of document.\n        // also block seems to be autoclosed by end of parent\n        break;\n      }\n\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (start < max && state.sCount[nextLine] < state.blkIndent) {\n        // non-empty line with negative indent should stop the list:\n        // - ```\n        //  test\n        break;\n      }\n\n      if (marker_char !== state.src.charCodeAt(start)) { continue; }\n\n      if (state.sCount[nextLine] - state.blkIndent >= 4) {\n        // closing fence should be indented less than 4 spaces\n        continue;\n      }\n\n      for (pos = start + 1; pos <= max; pos++) {\n        if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {\n          break;\n        }\n      }\n\n      // closing code fence must be at least as long as the opening one\n      if (Math.floor((pos - start) / marker_len) < marker_count) { continue; }\n\n      // make sure tail has spaces only\n      pos -= (pos - start) % marker_len;\n      pos = state.skipSpaces(pos);\n\n      if (pos < max) { continue; }\n\n      // found!\n      auto_closed = true;\n      break;\n    }\n\n    old_parent = state.parentType;\n    old_line_max = state.lineMax;\n    state.parentType = 'container';\n\n    // this will prevent lazy continuations from ever going past our end marker\n    state.lineMax = nextLine;\n\n    token        = state.push('container_' + name + '_open', 'div', 1);\n    token.markup = markup;\n    token.block  = true;\n    token.info   = params;\n    token.map    = [ startLine, nextLine ];\n\n    state.md.block.tokenize(state, startLine + 1, nextLine);\n\n    token        = state.push('container_' + name + '_close', 'div', -1);\n    token.markup = state.src.slice(start, pos);\n    token.block  = true;\n\n    state.parentType = old_parent;\n    state.lineMax = old_line_max;\n    state.line = nextLine + (auto_closed ? 1 : 0);\n\n    return true;\n  }\n\n  md.block.ruler.before('fence', 'container_' + name, container, {\n    alt: [ 'paragraph', 'reference', 'blockquote', 'list' ]\n  });\n  md.renderer.rules['container_' + name + '_open'] = render;\n  md.renderer.rules['container_' + name + '_close'] = render;\n};\n", "export default require(\"../node_modules/markdown-it-container/index.js\");"],
  "mappings": "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",
  "names": []
}
