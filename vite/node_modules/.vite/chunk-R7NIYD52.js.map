{
  "version": 3,
  "sources": ["../../../node_modules/orderedmap/index.es.js", "../../../node_modules/prosemirror-model/src/diff.js", "../../../node_modules/prosemirror-model/src/fragment.js", "../../../node_modules/prosemirror-model/src/comparedeep.js", "../../../node_modules/prosemirror-model/src/mark.js", "../../../node_modules/prosemirror-model/src/replace.js", "../../../node_modules/prosemirror-model/src/resolvedpos.js", "../../../node_modules/prosemirror-model/src/node.js", "../../../node_modules/prosemirror-model/src/content.js", "../../../node_modules/prosemirror-model/src/schema.js", "../../../node_modules/prosemirror-model/src/from_dom.js", "../../../node_modules/prosemirror-model/src/to_dom.js"],
  "sourcesContent": ["// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content;\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) \u2192 ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key);\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) \u2192 OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this;\n    var found = self.find(key), content = self.content.slice();\n    if (found == -1) {\n      content.push(newKey || key, value);\n    } else {\n      content[found + 1] = value;\n      if (newKey) content[found] = newKey;\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) \u2192 OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key);\n    if (found == -1) return this\n    var content = this.content.slice();\n    content.splice(found, 2);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) \u2192 OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) \u2192 OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice();\n    content.push(key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) \u2192 OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice();\n    var found = without.find(place);\n    content.splice(found == -1 ? content.length : found, 0, key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1]);\n  },\n\n  // :: (union<Object, OrderedMap>) \u2192 OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) \u2192 OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) \u2192 OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this;\n    map = OrderedMap.from(map);\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i]);\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n};\n\n// :: (?union<Object, OrderedMap>) \u2192 OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = [];\n  if (value) for (var prop in value) content.push(prop, value[prop]);\n  return new OrderedMap(content)\n};\n\nvar orderedmap = OrderedMap;\n\nexport default orderedmap;\n", "export function findDiffStart(a, b, pos) {\n  for (let i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount)\n      return a.childCount == b.childCount ? null : pos\n\n    let childA = a.child(i), childB = b.child(i)\n    if (childA == childB) { pos += childA.nodeSize; continue }\n\n    if (!childA.sameMarkup(childB)) return pos\n\n    if (childA.isText && childA.text != childB.text) {\n      for (let j = 0; childA.text[j] == childB.text[j]; j++)\n        pos++\n      return pos\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffStart(childA.content, childB.content, pos + 1)\n      if (inner != null) return inner\n    }\n    pos += childA.nodeSize\n  }\n}\n\nexport function findDiffEnd(a, b, posA, posB) {\n  for (let iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0)\n      return iA == iB ? null : {a: posA, b: posB}\n\n    let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize\n    if (childA == childB) {\n      posA -= size; posB -= size\n      continue\n    }\n\n    if (!childA.sameMarkup(childB)) return {a: posA, b: posB}\n\n    if (childA.isText && childA.text != childB.text) {\n      let same = 0, minSize = Math.min(childA.text.length, childB.text.length)\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++; posA--; posB--\n      }\n      return {a: posA, b: posB}\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1)\n      if (inner) return inner\n    }\n    posA -= size; posB -= size\n  }\n}\n", "import {findDiffStart, findDiffEnd} from \"./diff\"\n\n// ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\nexport class Fragment {\n  constructor(content, size) {\n    this.content = content\n    // :: number\n    // The size of the fragment, which is the total of the size of its\n    // content nodes.\n    this.size = size || 0\n    if (size == null) for (let i = 0; i < content.length; i++)\n      this.size += content[i].nodeSize\n  }\n\n  // :: (number, number, (node: Node, start: number, parent: Node, index: number) \u2192 ?bool, ?number)\n  // Invoke a callback for all descendant nodes between the given two\n  // positions (relative to start of this fragment). Doesn't descend\n  // into a node when the callback returns `false`.\n  nodesBetween(from, to, f, nodeStart = 0, parent) {\n    for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n        let start = pos + 1\n        child.nodesBetween(Math.max(0, from - start),\n                           Math.min(child.content.size, to - start),\n                           f, nodeStart + start)\n      }\n      pos = end\n    }\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) \u2192 ?bool)\n  // Call the given callback for every descendant node. The callback\n  // may return `false` to prevent traversal of a given node's children.\n  descendants(f) {\n    this.nodesBetween(0, this.size, f)\n  }\n\n  // : (number, number, ?string, ?string) \u2192 string\n  textBetween(from, to, blockSeparator, leafText) {\n    let text = \"\", separated = true\n    this.nodesBetween(from, to, (node, pos) => {\n      if (node.isText) {\n        text += node.text.slice(Math.max(from, pos) - pos, to - pos)\n        separated = !blockSeparator\n      } else if (node.isLeaf && leafText) {\n        text += leafText\n        separated = !blockSeparator\n      } else if (!separated && node.isBlock) {\n        text += blockSeparator\n        separated = true\n      }\n    }, 0)\n    return text\n  }\n\n  // :: (Fragment) \u2192 Fragment\n  // Create a new fragment containing the combined content of this\n  // fragment and the other.\n  append(other) {\n    if (!other.size) return this\n    if (!this.size) return other\n    let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0\n    if (last.isText && last.sameMarkup(first)) {\n      content[content.length - 1] = last.withText(last.text + first.text)\n      i = 1\n    }\n    for (; i < other.content.length; i++) content.push(other.content[i])\n    return new Fragment(content, this.size + other.size)\n  }\n\n  // :: (number, ?number) \u2192 Fragment\n  // Cut out the sub-fragment between the two given positions.\n  cut(from, to) {\n    if (to == null) to = this.size\n    if (from == 0 && to == this.size) return this\n    let result = [], size = 0\n    if (to > from) for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from) {\n        if (pos < from || end > to) {\n          if (child.isText)\n            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos))\n          else\n            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1))\n        }\n        result.push(child)\n        size += child.nodeSize\n      }\n      pos = end\n    }\n    return new Fragment(result, size)\n  }\n\n  cutByIndex(from, to) {\n    if (from == to) return Fragment.empty\n    if (from == 0 && to == this.content.length) return this\n    return new Fragment(this.content.slice(from, to))\n  }\n\n  // :: (number, Node) \u2192 Fragment\n  // Create a new fragment in which the node at the given index is\n  // replaced by the given node.\n  replaceChild(index, node) {\n    let current = this.content[index]\n    if (current == node) return this\n    let copy = this.content.slice()\n    let size = this.size + node.nodeSize - current.nodeSize\n    copy[index] = node\n    return new Fragment(copy, size)\n  }\n\n  // : (Node) \u2192 Fragment\n  // Create a new fragment by prepending the given node to this\n  // fragment.\n  addToStart(node) {\n    return new Fragment([node].concat(this.content), this.size + node.nodeSize)\n  }\n\n  // : (Node) \u2192 Fragment\n  // Create a new fragment by appending the given node to this\n  // fragment.\n  addToEnd(node) {\n    return new Fragment(this.content.concat(node), this.size + node.nodeSize)\n  }\n\n  // :: (Fragment) \u2192 bool\n  // Compare this fragment to another one.\n  eq(other) {\n    if (this.content.length != other.content.length) return false\n    for (let i = 0; i < this.content.length; i++)\n      if (!this.content[i].eq(other.content[i])) return false\n    return true\n  }\n\n  // :: ?Node\n  // The first child of the fragment, or `null` if it is empty.\n  get firstChild() { return this.content.length ? this.content[0] : null }\n\n  // :: ?Node\n  // The last child of the fragment, or `null` if it is empty.\n  get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null }\n\n  // :: number\n  // The number of child nodes in this fragment.\n  get childCount() { return this.content.length }\n\n  // :: (number) \u2192 Node\n  // Get the child node at the given index. Raise an error when the\n  // index is out of range.\n  child(index) {\n    let found = this.content[index]\n    if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this)\n    return found\n  }\n\n  // :: (number) \u2192 ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) {\n    return this.content[index]\n  }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) {\n    for (let i = 0, p = 0; i < this.content.length; i++) {\n      let child = this.content[i]\n      f(child, p, i)\n      p += child.nodeSize\n    }\n  }\n\n  // :: (Fragment) \u2192 ?number\n  // Find the first position at which this fragment and another\n  // fragment differ, or `null` if they are the same.\n  findDiffStart(other, pos = 0) {\n    return findDiffStart(this, other, pos)\n  }\n\n  // :: (Fragment) \u2192 ?{a: number, b: number}\n  // Find the first position, searching from the end, at which this\n  // fragment and the given fragment differ, or `null` if they are the\n  // same. Since this position will not be the same in both nodes, an\n  // object with two separate positions is returned.\n  findDiffEnd(other, pos = this.size, otherPos = other.size) {\n    return findDiffEnd(this, other, pos, otherPos)\n  }\n\n  // : (number, ?number) \u2192 {index: number, offset: number}\n  // Find the index and inner offset corresponding to a given relative\n  // position in this fragment. The result object will be reused\n  // (overwritten) the next time the function is called. (Not public.)\n  findIndex(pos, round = -1) {\n    if (pos == 0) return retIndex(0, pos)\n    if (pos == this.size) return retIndex(this.content.length, pos)\n    if (pos > this.size || pos < 0) throw new RangeError(`Position ${pos} outside of fragment (${this})`)\n    for (let i = 0, curPos = 0;; i++) {\n      let cur = this.child(i), end = curPos + cur.nodeSize\n      if (end >= pos) {\n        if (end == pos || round > 0) return retIndex(i + 1, end)\n        return retIndex(i, curPos)\n      }\n      curPos = end\n    }\n  }\n\n  // :: () \u2192 string\n  // Return a debugging string that describes this fragment.\n  toString() { return \"<\" + this.toStringInner() + \">\" }\n\n  toStringInner() { return this.content.join(\", \") }\n\n  // :: () \u2192 ?Object\n  // Create a JSON-serializeable representation of this fragment.\n  toJSON() {\n    return this.content.length ? this.content.map(n => n.toJSON()) : null\n  }\n\n  // :: (Schema, ?Object) \u2192 Fragment\n  // Deserialize a fragment from its JSON representation.\n  static fromJSON(schema, value) {\n    if (!value) return Fragment.empty\n    if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\")\n    return new Fragment(value.map(schema.nodeFromJSON))\n  }\n\n  // :: ([Node]) \u2192 Fragment\n  // Build a fragment from an array of nodes. Ensures that adjacent\n  // text nodes with the same marks are joined together.\n  static fromArray(array) {\n    if (!array.length) return Fragment.empty\n    let joined, size = 0\n    for (let i = 0; i < array.length; i++) {\n      let node = array[i]\n      size += node.nodeSize\n      if (i && node.isText && array[i - 1].sameMarkup(node)) {\n        if (!joined) joined = array.slice(0, i)\n        joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text)\n      } else if (joined) {\n        joined.push(node)\n      }\n    }\n    return new Fragment(joined || array, size)\n  }\n\n  // :: (?union<Fragment, Node, [Node]>) \u2192 Fragment\n  // Create a fragment from something that can be interpreted as a set\n  // of nodes. For `null`, it returns the empty fragment. For a\n  // fragment, the fragment itself. For a node or array of nodes, a\n  // fragment containing those nodes.\n  static from(nodes) {\n    if (!nodes) return Fragment.empty\n    if (nodes instanceof Fragment) return nodes\n    if (Array.isArray(nodes)) return this.fromArray(nodes)\n    if (nodes.attrs) return new Fragment([nodes], nodes.nodeSize)\n    throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n                         (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"))\n  }\n}\n\nconst found = {index: 0, offset: 0}\nfunction retIndex(index, offset) {\n  found.index = index\n  found.offset = offset\n  return found\n}\n\n// :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\nFragment.empty = new Fragment([], 0)\n", "export function compareDeep(a, b) {\n  if (a === b) return true\n  if (!(a && typeof a == \"object\") ||\n      !(b && typeof b == \"object\")) return false\n  let array = Array.isArray(a)\n  if (Array.isArray(b) != array) return false\n  if (array) {\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++) if (!compareDeep(a[i], b[i])) return false\n  } else {\n    for (let p in a) if (!(p in b) || !compareDeep(a[p], b[p])) return false\n    for (let p in b) if (!(p in a)) return false\n  }\n  return true\n}\n", "import {compareDeep} from \"./comparedeep\"\n\n// ::- A mark is a piece of information that can be attached to a node,\n// such as it being emphasized, in code font, or a link. It has a type\n// and optionally a set of attributes that provide further information\n// (such as the target of the link). Marks are created through a\n// `Schema`, which controls which types exist and which\n// attributes they have.\nexport class Mark {\n  constructor(type, attrs) {\n    // :: MarkType\n    // The type of this mark.\n    this.type = type\n    // :: Object\n    // The attributes associated with this mark.\n    this.attrs = attrs\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // Given a set of marks, create a new set which contains this one as\n  // well, in the right position. If this mark is already in the set,\n  // the set itself is returned. If any marks that are set to be\n  // [exclusive](#model.MarkSpec.excludes) with this mark are present,\n  // those are replaced by this one.\n  addToSet(set) {\n    let copy, placed = false\n    for (let i = 0; i < set.length; i++) {\n      let other = set[i]\n      if (this.eq(other)) return set\n      if (this.type.excludes(other.type)) {\n        if (!copy) copy = set.slice(0, i)\n      } else if (other.type.excludes(this.type)) {\n        return set\n      } else {\n        if (!placed && other.type.rank > this.type.rank) {\n          if (!copy) copy = set.slice(0, i)\n          copy.push(this)\n          placed = true\n        }\n        if (copy) copy.push(other)\n      }\n    }\n    if (!copy) copy = set.slice()\n    if (!placed) copy.push(this)\n    return copy\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // Remove this mark from the given set, returning a new set. If this\n  // mark is not in the set, the set itself is returned.\n  removeFromSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i]))\n        return set.slice(0, i).concat(set.slice(i + 1))\n    return set\n  }\n\n  // :: ([Mark]) \u2192 bool\n  // Test whether this mark is in the given set of marks.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i])) return true\n    return false\n  }\n\n  // :: (Mark) \u2192 bool\n  // Test whether this mark has the same type and attributes as\n  // another mark.\n  eq(other) {\n    return this == other ||\n      (this.type == other.type && compareDeep(this.attrs, other.attrs))\n  }\n\n  // :: () \u2192 Object\n  // Convert this mark to a JSON-serializeable representation.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    return obj\n  }\n\n  // :: (Schema, Object) \u2192 Mark\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Mark.fromJSON\")\n    let type = schema.marks[json.type]\n    if (!type) throw new RangeError(`There is no mark type ${json.type} in this schema`)\n    return type.create(json.attrs)\n  }\n\n  // :: ([Mark], [Mark]) \u2192 bool\n  // Test whether two sets of marks are identical.\n  static sameSet(a, b) {\n    if (a == b) return true\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++)\n      if (!a[i].eq(b[i])) return false\n    return true\n  }\n\n  // :: (?union<Mark, [Mark]>) \u2192 [Mark]\n  // Create a properly sorted mark set from null, a single mark, or an\n  // unsorted array of marks.\n  static setFrom(marks) {\n    if (!marks || marks.length == 0) return Mark.none\n    if (marks instanceof Mark) return [marks]\n    let copy = marks.slice()\n    copy.sort((a, b) => a.type.rank - b.type.rank)\n    return copy\n  }\n}\n\n// :: [Mark] The empty set of marks.\nMark.none = []\n", "import {Fragment} from \"./fragment\"\n\n// ReplaceError:: class extends Error\n// Error type raised by [`Node.replace`](#model.Node.replace) when\n// given an invalid replacement.\n\nexport function ReplaceError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = ReplaceError.prototype\n  return err\n}\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n\n// ::- A slice represents a piece cut out of a larger document. It\n// stores not only a fragment, but also the depth up to which nodes on\n// both side are \u2018open\u2019 (cut through).\nexport class Slice {\n  // :: (Fragment, number, number)\n  // Create a slice. When specifying a non-zero open depth, you must\n  // make sure that there are nodes of at least that depth at the\n  // appropriate side of the fragment\u2014i.e. if the fragment is an empty\n  // paragraph node, `openStart` and `openEnd` can't be greater than 1.\n  //\n  // It is not necessary for the content of open nodes to conform to\n  // the schema's content constraints, though it should be a valid\n  // start/end/middle for such a node, depending on which sides are\n  // open.\n  constructor(content, openStart, openEnd) {\n    // :: Fragment The slice's content.\n    this.content = content\n    // :: number The open depth at the start.\n    this.openStart = openStart\n    // :: number The open depth at the end.\n    this.openEnd = openEnd\n  }\n\n  // :: number\n  // The size this slice would add when inserted into a document.\n  get size() {\n    return this.content.size - this.openStart - this.openEnd\n  }\n\n  insertAt(pos, fragment) {\n    let content = insertInto(this.content, pos + this.openStart, fragment, null)\n    return content && new Slice(content, this.openStart, this.openEnd)\n  }\n\n  removeBetween(from, to) {\n    return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)\n  }\n\n  // :: (Slice) \u2192 bool\n  // Tests whether this slice is equal to another slice.\n  eq(other) {\n    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd\n  }\n\n  toString() {\n    return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\"\n  }\n\n  // :: () \u2192 ?Object\n  // Convert a slice to a JSON-serializable representation.\n  toJSON() {\n    if (!this.content.size) return null\n    let json = {content: this.content.toJSON()}\n    if (this.openStart > 0) json.openStart = this.openStart\n    if (this.openEnd > 0) json.openEnd = this.openEnd\n    return json\n  }\n\n  // :: (Schema, ?Object) \u2192 Slice\n  // Deserialize a slice from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) return Slice.empty\n    let openStart = json.openStart || 0, openEnd = json.openEnd || 0\n    if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n      throw new RangeError(\"Invalid input for Slice.fromJSON\")\n    return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd)\n  }\n\n  // :: (Fragment, ?bool) \u2192 Slice\n  // Create a slice from a fragment by taking the maximum possible\n  // open value on both side of the fragment.\n  static maxOpen(fragment, openIsolating=true) {\n    let openStart = 0, openEnd = 0\n    for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) openStart++\n    for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild) openEnd++\n    return new Slice(fragment, openStart, openEnd)\n  }\n}\n\nfunction removeRange(content, from, to) {\n  let {index, offset} = content.findIndex(from), child = content.maybeChild(index)\n  let {index: indexTo, offset: offsetTo} = content.findIndex(to)\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError(\"Removing non-flat range\")\n    return content.cut(0, from).append(content.cut(to))\n  }\n  if (index != indexTo) throw new RangeError(\"Removing non-flat range\")\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))\n}\n\nfunction insertInto(content, dist, insert, parent) {\n  let {index, offset} = content.findIndex(dist), child = content.maybeChild(index)\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) return null\n    return content.cut(0, dist).append(insert).append(content.cut(dist))\n  }\n  let inner = insertInto(child.content, dist - offset - 1, insert)\n  return inner && content.replaceChild(index, child.copy(inner))\n}\n\n// :: Slice\n// The empty slice.\nSlice.empty = new Slice(Fragment.empty, 0, 0)\n\nexport function replace($from, $to, slice) {\n  if (slice.openStart > $from.depth)\n    throw new ReplaceError(\"Inserted content deeper than insertion position\")\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n    throw new ReplaceError(\"Inconsistent open depths\")\n  return replaceOuter($from, $to, slice, 0)\n}\n\nfunction replaceOuter($from, $to, slice, depth) {\n  let index = $from.index(depth), node = $from.node(depth)\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    let inner = replaceOuter($from, $to, slice, depth + 1)\n    return node.copy(node.content.replaceChild(index, inner))\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth))\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n    let parent = $from.parent, content = parent.content\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))\n  } else {\n    let {start, end} = prepareSliceForReplace(slice, $from)\n    return close(node, replaceThreeWay($from, start, end, $to, depth))\n  }\n}\n\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type))\n    throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name)\n}\n\nfunction joinable($before, $after, depth) {\n  let node = $before.node(depth)\n  checkJoin(node, $after.node(depth))\n  return node\n}\n\nfunction addNode(child, target) {\n  let last = target.length - 1\n  if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n    target[last] = child.withText(target[last].text + child.text)\n  else\n    target.push(child)\n}\n\nfunction addRange($start, $end, depth, target) {\n  let node = ($end || $start).node(depth)\n  let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount\n  if ($start) {\n    startIndex = $start.index(depth)\n    if ($start.depth > depth) {\n      startIndex++\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target)\n      startIndex++\n    }\n  }\n  for (let i = startIndex; i < endIndex; i++) addNode(node.child(i), target)\n  if ($end && $end.depth == depth && $end.textOffset)\n    addNode($end.nodeBefore, target)\n}\n\nfunction close(node, content) {\n  if (!node.type.validContent(content))\n    throw new ReplaceError(\"Invalid content for node \" + node.type.name)\n  return node.copy(content)\n}\n\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  let openStart = $from.depth > depth && joinable($from, $start, depth + 1)\n  let openEnd = $to.depth > depth && joinable($end, $to, depth + 1)\n\n  let content = []\n  addRange(null, $from, depth, content)\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd)\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content)\n  } else {\n    if (openStart)\n      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content)\n    addRange($start, $end, depth, content)\n    if (openEnd)\n      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction replaceTwoWay($from, $to, depth) {\n  let content = []\n  addRange(null, $from, depth, content)\n  if ($from.depth > depth) {\n    let type = joinable($from, $to, depth + 1)\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction prepareSliceForReplace(slice, $along) {\n  let extra = $along.depth - slice.openStart, parent = $along.node(extra)\n  let node = parent.copy(slice.content)\n  for (let i = extra - 1; i >= 0; i--)\n    node = $along.node(i).copy(Fragment.from(node))\n  return {start: node.resolveNoCache(slice.openStart + extra),\n          end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}\n}\n", "import {Mark} from \"./mark\"\n\n// ::- You can [_resolve_](#model.Node.resolve) a position to get more\n// information about it. Objects of this class represent such a\n// resolved position, providing various pieces of context information,\n// and some helper methods.\n//\n// Throughout this interface, methods that take an optional `depth`\n// parameter will interpret undefined as `this.depth` and negative\n// numbers as `this.depth + value`.\nexport class ResolvedPos {\n  constructor(pos, path, parentOffset) {\n    // :: number The position that was resolved.\n    this.pos = pos\n    this.path = path\n    // :: number\n    // The number of levels the parent node is from the root. If this\n    // position points directly into the root node, it is 0. If it\n    // points into a top-level paragraph, 1, and so on.\n    this.depth = path.length / 3 - 1\n    // :: number The offset this position has into its parent node.\n    this.parentOffset = parentOffset\n  }\n\n  resolveDepth(val) {\n    if (val == null) return this.depth\n    if (val < 0) return this.depth + val\n    return val\n  }\n\n  // :: Node\n  // The parent node that the position points into. Note that even if\n  // a position points into a text node, that node is not considered\n  // the parent\u2014text nodes are \u2018flat\u2019 in this model, and have no content.\n  get parent() { return this.node(this.depth) }\n\n  // :: Node\n  // The root node in which the position was resolved.\n  get doc() { return this.node(0) }\n\n  // :: (?number) \u2192 Node\n  // The ancestor node at the given level. `p.node(p.depth)` is the\n  // same as `p.parent`.\n  node(depth) { return this.path[this.resolveDepth(depth) * 3] }\n\n  // :: (?number) \u2192 number\n  // The index into the ancestor at the given level. If this points at\n  // the 3rd node in the 2nd paragraph on the top level, for example,\n  // `p.index(0)` is 1 and `p.index(1)` is 2.\n  index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1] }\n\n  // :: (?number) \u2192 number\n  // The index pointing after this position into the ancestor at the\n  // given level.\n  indexAfter(depth) {\n    depth = this.resolveDepth(depth)\n    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position at the start of the node at the given\n  // level.\n  start(depth) {\n    depth = this.resolveDepth(depth)\n    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position at the end of the node at the given\n  // level.\n  end(depth) {\n    depth = this.resolveDepth(depth)\n    return this.start(depth) + this.node(depth).content.size\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position directly before the wrapping node at the\n  // given level, or, when `depth` is `this.depth + 1`, the original\n  // position.\n  before(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position before the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position directly after the wrapping node at the\n  // given level, or the original position when `depth` is `this.depth + 1`.\n  after(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position after the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize\n  }\n\n  // :: number\n  // When this position points into a text node, this returns the\n  // distance between the position and the start of the text node.\n  // Will be zero for positions that point between nodes.\n  get textOffset() { return this.pos - this.path[this.path.length - 1] }\n\n  // :: ?Node\n  // Get the node directly after the position, if any. If the position\n  // points into a text node, only the part of that node after the\n  // position is returned.\n  get nodeAfter() {\n    let parent = this.parent, index = this.index(this.depth)\n    if (index == parent.childCount) return null\n    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index)\n    return dOff ? parent.child(index).cut(dOff) : child\n  }\n\n  // :: ?Node\n  // Get the node directly before the position, if any. If the\n  // position points into a text node, only the part of that node\n  // before the position is returned.\n  get nodeBefore() {\n    let index = this.index(this.depth)\n    let dOff = this.pos - this.path[this.path.length - 1]\n    if (dOff) return this.parent.child(index).cut(0, dOff)\n    return index == 0 ? null : this.parent.child(index - 1)\n  }\n\n  // :: (number, ?number) \u2192 number\n  // Get the position at the given index in the parent node at the\n  // given depth (which defaults to `this.depth`).\n  posAtIndex(index, depth) {\n    depth = this.resolveDepth(depth)\n    let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n    for (let i = 0; i < index; i++) pos += node.child(i).nodeSize\n    return pos\n  }\n\n  // :: () \u2192 [Mark]\n  // Get the marks at this position, factoring in the surrounding\n  // marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n  // position is at the start of a non-empty node, the marks of the\n  // node after it (if any) are returned.\n  marks() {\n    let parent = this.parent, index = this.index()\n\n    // In an empty parent, return the empty array\n    if (parent.content.size == 0) return Mark.none\n\n    // When inside a text node, just return the text node's marks\n    if (this.textOffset) return parent.child(index).marks\n\n    let main = parent.maybeChild(index - 1), other = parent.maybeChild(index)\n    // If the `after` flag is true of there is no node before, make\n    // the node after this position the main reference.\n    if (!main) { let tmp = main; main = other; other = tmp }\n\n    // Use all marks in the main node, except those that have\n    // `inclusive` set to false and are not present in the other node.\n    let marks = main.marks\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n        marks = marks[i--].removeFromSet(marks)\n\n    return marks\n  }\n\n  // :: (ResolvedPos) \u2192 ?[Mark]\n  // Get the marks after the current position, if any, except those\n  // that are non-inclusive and not present at position `$end`. This\n  // is mostly useful for getting the set of marks to preserve after a\n  // deletion. Will return `null` if this position is at the end of\n  // its parent node or its parent node isn't a textblock (in which\n  // case no marks should be preserved).\n  marksAcross($end) {\n    let after = this.parent.maybeChild(this.index())\n    if (!after || !after.isInline) return null\n\n    let marks = after.marks, next = $end.parent.maybeChild($end.index())\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n        marks = marks[i--].removeFromSet(marks)\n    return marks\n  }\n\n  // :: (number) \u2192 number\n  // The depth up to which this position and the given (non-resolved)\n  // position share the same parent nodes.\n  sharedDepth(pos) {\n    for (let depth = this.depth; depth > 0; depth--)\n      if (this.start(depth) <= pos && this.end(depth) >= pos) return depth\n    return 0\n  }\n\n  // :: (?ResolvedPos, ?(Node) \u2192 bool) \u2192 ?NodeRange\n  // Returns a range based on the place where this position and the\n  // given position diverge around block content. If both point into\n  // the same textblock, for example, a range around that textblock\n  // will be returned. If they point into different blocks, the range\n  // around those blocks in their shared ancestor is returned. You can\n  // pass in an optional predicate that will be called with a parent\n  // node to see if a range into that parent is acceptable.\n  blockRange(other = this, pred) {\n    if (other.pos < this.pos) return other.blockRange(this)\n    for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n      if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n        return new NodeRange(this, other, d)\n  }\n\n  // :: (ResolvedPos) \u2192 bool\n  // Query whether the given position shares the same parent node.\n  sameParent(other) {\n    return this.pos - this.parentOffset == other.pos - other.parentOffset\n  }\n\n  // :: (ResolvedPos) \u2192 ResolvedPos\n  // Return the greater of this and the given position.\n  max(other) {\n    return other.pos > this.pos ? other : this\n  }\n\n  // :: (ResolvedPos) \u2192 ResolvedPos\n  // Return the smaller of this and the given position.\n  min(other) {\n    return other.pos < this.pos ? other : this\n  }\n\n  toString() {\n    let str = \"\"\n    for (let i = 1; i <= this.depth; i++)\n      str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1)\n    return str + \":\" + this.parentOffset\n  }\n\n  static resolve(doc, pos) {\n    if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError(\"Position \" + pos + \" out of range\")\n    let path = []\n    let start = 0, parentOffset = pos\n    for (let node = doc;;) {\n      let {index, offset} = node.content.findIndex(parentOffset)\n      let rem = parentOffset - offset\n      path.push(node, index, start + offset)\n      if (!rem) break\n      node = node.child(index)\n      if (node.isText) break\n      parentOffset = rem - 1\n      start += offset + 1\n    }\n    return new ResolvedPos(pos, path, parentOffset)\n  }\n\n  static resolveCached(doc, pos) {\n    for (let i = 0; i < resolveCache.length; i++) {\n      let cached = resolveCache[i]\n      if (cached.pos == pos && cached.doc == doc) return cached\n    }\n    let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos)\n    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize\n    return result\n  }\n}\n\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12\n\n// ::- Represents a flat range of content, i.e. one that starts and\n// ends in the same node.\nexport class NodeRange {\n  // :: (ResolvedPos, ResolvedPos, number)\n  // Construct a node range. `$from` and `$to` should point into the\n  // same node until at least the given `depth`, since a node range\n  // denotes an adjacent set of nodes in a single parent node.\n  constructor($from, $to, depth) {\n    // :: ResolvedPos A resolved position along the start of the\n    // content. May have a `depth` greater than this object's `depth`\n    // property, since these are the positions that were used to\n    // compute the range, not re-resolved positions directly at its\n    // boundaries.\n    this.$from = $from\n    // :: ResolvedPos A position along the end of the content. See\n    // caveat for [`$from`](#model.NodeRange.$from).\n    this.$to = $to\n    // :: number The depth of the node that this range points into.\n    this.depth = depth\n  }\n\n  // :: number The position at the start of the range.\n  get start() { return this.$from.before(this.depth + 1) }\n  // :: number The position at the end of the range.\n  get end() { return this.$to.after(this.depth + 1) }\n\n  // :: Node The parent node that the range points into.\n  get parent() { return this.$from.node(this.depth) }\n  // :: number The start index of the range in the parent node.\n  get startIndex() { return this.$from.index(this.depth) }\n  // :: number The end index of the range in the parent node.\n  get endIndex() { return this.$to.indexAfter(this.depth) }\n}\n", "import {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {Slice, replace} from \"./replace\"\nimport {ResolvedPos} from \"./resolvedpos\"\nimport {compareDeep} from \"./comparedeep\"\n\nconst emptyAttrs = Object.create(null)\n\n// ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\nexport class Node {\n  constructor(type, attrs, content, marks) {\n    // :: NodeType\n    // The type of node that this is.\n    this.type = type\n\n    // :: Object\n    // An object mapping attribute names to values. The kind of\n    // attributes allowed and required are\n    // [determined](#model.NodeSpec.attrs) by the node type.\n    this.attrs = attrs\n\n    // :: Fragment\n    // A container holding the node's children.\n    this.content = content || Fragment.empty\n\n    // :: [Mark]\n    // The marks (things like whether it is emphasized or part of a\n    // link) applied to this node.\n    this.marks = marks || Mark.none\n  }\n\n  // text:: ?string\n  // For text nodes, this contains the node's text content.\n\n  // :: number\n  // The size of this node, as defined by the integer-based [indexing\n  // scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n  // amount of characters. For other leaf nodes, it is one. For\n  // non-leaf nodes, it is the size of the content plus two (the start\n  // and end token).\n  get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size }\n\n  // :: number\n  // The number of children that the node has.\n  get childCount() { return this.content.childCount }\n\n  // :: (number) \u2192 Node\n  // Get the child node at the given index. Raises an error when the\n  // index is out of range.\n  child(index) { return this.content.child(index) }\n\n  // :: (number) \u2192 ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) { return this.content.maybeChild(index) }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) { this.content.forEach(f) }\n\n  // :: (number, number, (node: Node, pos: number, parent: Node, index: number) \u2192 ?bool, ?number)\n  // Invoke a callback for all descendant nodes recursively between\n  // the given two positions that are relative to start of this node's\n  // content. The callback is invoked with the node, its\n  // parent-relative position, its parent node, and its child index.\n  // When the callback returns false for a given node, that node's\n  // children will not be recursed over. The last parameter can be\n  // used to specify a starting position to count from.\n  nodesBetween(from, to, f, startPos = 0) {\n    this.content.nodesBetween(from, to, f, startPos, this)\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) \u2192 ?bool)\n  // Call the given callback for every descendant node. Doesn't\n  // descend into a node when the callback returns `false`.\n  descendants(f) {\n    this.nodesBetween(0, this.content.size, f)\n  }\n\n  // :: string\n  // Concatenates all the text nodes found in this fragment and its\n  // children.\n  get textContent() { return this.textBetween(0, this.content.size, \"\") }\n\n  // :: (number, number, ?string, ?string) \u2192 string\n  // Get all text between positions `from` and `to`. When\n  // `blockSeparator` is given, it will be inserted whenever a new\n  // block node is started. When `leafText` is given, it'll be\n  // inserted for every non-text leaf node encountered.\n  textBetween(from, to, blockSeparator, leafText) {\n    return this.content.textBetween(from, to, blockSeparator, leafText)\n  }\n\n  // :: ?Node\n  // Returns this node's first child, or `null` if there are no\n  // children.\n  get firstChild() { return this.content.firstChild }\n\n  // :: ?Node\n  // Returns this node's last child, or `null` if there are no\n  // children.\n  get lastChild() { return this.content.lastChild }\n\n  // :: (Node) \u2192 bool\n  // Test whether two nodes represent the same piece of document.\n  eq(other) {\n    return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\n  }\n\n  // :: (Node) \u2192 bool\n  // Compare the markup (type, attributes, and marks) of this node to\n  // those of another. Returns `true` if both have the same markup.\n  sameMarkup(other) {\n    return this.hasMarkup(other.type, other.attrs, other.marks)\n  }\n\n  // :: (NodeType, ?Object, ?[Mark]) \u2192 bool\n  // Check whether this node's markup correspond to the given type,\n  // attributes, and marks.\n  hasMarkup(type, attrs, marks) {\n    return this.type == type &&\n      compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n      Mark.sameSet(this.marks, marks || Mark.none)\n  }\n\n  // :: (?Fragment) \u2192 Node\n  // Create a new node with the same markup as this node, containing\n  // the given content (or empty, if no content is given).\n  copy(content = null) {\n    if (content == this.content) return this\n    return new this.constructor(this.type, this.attrs, content, this.marks)\n  }\n\n  // :: ([Mark]) \u2192 Node\n  // Create a copy of this node, with the given set of marks instead\n  // of the node's own marks.\n  mark(marks) {\n    return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\n  }\n\n  // :: (number, ?number) \u2192 Node\n  // Create a copy of this node with only the content between the\n  // given positions. If `to` is not given, it defaults to the end of\n  // the node.\n  cut(from, to) {\n    if (from == 0 && to == this.content.size) return this\n    return this.copy(this.content.cut(from, to))\n  }\n\n  // :: (number, ?number) \u2192 Slice\n  // Cut out the part of the document between the given positions, and\n  // return it as a `Slice` object.\n  slice(from, to = this.content.size, includeParents = false) {\n    if (from == to) return Slice.empty\n\n    let $from = this.resolve(from), $to = this.resolve(to)\n    let depth = includeParents ? 0 : $from.sharedDepth(to)\n    let start = $from.start(depth), node = $from.node(depth)\n    let content = node.content.cut($from.pos - start, $to.pos - start)\n    return new Slice(content, $from.depth - depth, $to.depth - depth)\n  }\n\n  // :: (number, number, Slice) \u2192 Node\n  // Replace the part of the document between the given positions with\n  // the given slice. The slice must 'fit', meaning its open sides\n  // must be able to connect to the surrounding content, and its\n  // content nodes must be valid children for the node they are placed\n  // into. If any of this is violated, an error of type\n  // [`ReplaceError`](#model.ReplaceError) is thrown.\n  replace(from, to, slice) {\n    return replace(this.resolve(from), this.resolve(to), slice)\n  }\n\n  // :: (number) \u2192 ?Node\n  // Find the node directly after the given position.\n  nodeAt(pos) {\n    for (let node = this;;) {\n      let {index, offset} = node.content.findIndex(pos)\n      node = node.maybeChild(index)\n      if (!node) return null\n      if (offset == pos || node.isText) return node\n      pos -= offset + 1\n    }\n  }\n\n  // :: (number) \u2192 {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node after the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childAfter(pos) {\n    let {index, offset} = this.content.findIndex(pos)\n    return {node: this.content.maybeChild(index), index, offset}\n  }\n\n  // :: (number) \u2192 {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node before the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childBefore(pos) {\n    if (pos == 0) return {node: null, index: 0, offset: 0}\n    let {index, offset} = this.content.findIndex(pos)\n    if (offset < pos) return {node: this.content.child(index), index, offset}\n    let node = this.content.child(index - 1)\n    return {node, index: index - 1, offset: offset - node.nodeSize}\n  }\n\n  // :: (number) \u2192 ResolvedPos\n  // Resolve the given position in the document, returning an\n  // [object](#model.ResolvedPos) with information about its context.\n  resolve(pos) { return ResolvedPos.resolveCached(this, pos) }\n\n  resolveNoCache(pos) { return ResolvedPos.resolve(this, pos) }\n\n  // :: (number, number, union<Mark, MarkType>) \u2192 bool\n  // Test whether a given mark or mark type occurs in this document\n  // between the two given positions.\n  rangeHasMark(from, to, type) {\n    let found = false\n    if (to > from) this.nodesBetween(from, to, node => {\n      if (type.isInSet(node.marks)) found = true\n      return !found\n    })\n    return found\n  }\n\n  // :: bool\n  // True when this is a block (non-inline node)\n  get isBlock() { return this.type.isBlock }\n\n  // :: bool\n  // True when this is a textblock node, a block node with inline\n  // content.\n  get isTextblock() { return this.type.isTextblock }\n\n  // :: bool\n  // True when this node allows inline content.\n  get inlineContent() { return this.type.inlineContent }\n\n  // :: bool\n  // True when this is an inline node (a text node or a node that can\n  // appear among text).\n  get isInline() { return this.type.isInline }\n\n  // :: bool\n  // True when this is a text node.\n  get isText() { return this.type.isText }\n\n  // :: bool\n  // True when this is a leaf node.\n  get isLeaf() { return this.type.isLeaf }\n\n  // :: bool\n  // True when this is an atom, i.e. when it does not have directly\n  // editable content. This is usually the same as `isLeaf`, but can\n  // be configured with the [`atom` property](#model.NodeSpec.atom) on\n  // a node's spec (typically used when the node is displayed as an\n  // uneditable [node view](#view.NodeView)).\n  get isAtom() { return this.type.isAtom }\n\n  // :: () \u2192 string\n  // Return a string representation of this node for debugging\n  // purposes.\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    let name = this.type.name\n    if (this.content.size)\n      name += \"(\" + this.content.toStringInner() + \")\"\n    return wrapMarks(this.marks, name)\n  }\n\n  // :: (number) \u2192 ContentMatch\n  // Get the content match in this node at the given index.\n  contentMatchAt(index) {\n    let match = this.type.contentMatch.matchFragment(this.content, 0, index)\n    if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\")\n    return match\n  }\n\n  // :: (number, number, ?Fragment, ?number, ?number) \u2192 bool\n  // Test whether replacing the range between `from` and `to` (by\n  // child index) with the given replacement fragment (which defaults\n  // to the empty fragment) would leave the node's content valid. You\n  // can optionally pass `start` and `end` indices into the\n  // replacement fragment.\n  canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n    let one = this.contentMatchAt(from).matchFragment(replacement, start, end)\n    let two = one && one.matchFragment(this.content, to)\n    if (!two || !two.validEnd) return false\n    for (let i = start; i < end; i++) if (!this.type.allowsMarks(replacement.child(i).marks)) return false\n    return true\n  }\n\n  // :: (number, number, NodeType, ?[Mark]) \u2192 bool\n  // Test whether replacing the range `from` to `to` (by index) with a\n  // node of the given type would leave the node's content valid.\n  canReplaceWith(from, to, type, marks) {\n    if (marks && !this.type.allowsMarks(marks)) return false\n    let start = this.contentMatchAt(from).matchType(type)\n    let end = start && start.matchFragment(this.content, to)\n    return end ? end.validEnd : false\n  }\n\n  // :: (Node) \u2192 bool\n  // Test whether the given node's content could be appended to this\n  // node. If that node is empty, this will only return true if there\n  // is at least one node type that can appear in both nodes (to avoid\n  // merging completely incompatible nodes).\n  canAppend(other) {\n    if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content)\n    else return this.type.compatibleContent(other.type)\n  }\n\n  // :: ()\n  // Check whether this node and its descendants conform to the\n  // schema, and raise error when they do not.\n  check() {\n    if (!this.type.validContent(this.content))\n      throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`)\n    this.content.forEach(node => node.check())\n  }\n\n  // :: () \u2192 Object\n  // Return a JSON-serializeable representation of this node.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    if (this.content.size)\n      obj.content = this.content.toJSON()\n    if (this.marks.length)\n      obj.marks = this.marks.map(n => n.toJSON())\n    return obj\n  }\n\n  // :: (Schema, Object) \u2192 Node\n  // Deserialize a node from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\")\n    let marks = null\n    if (json.marks) {\n      if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\")\n      marks = json.marks.map(schema.markFromJSON)\n    }\n    if (json.type == \"text\") {\n      if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\")\n      return schema.text(json.text, marks)\n    }\n    let content = Fragment.fromJSON(schema, json.content)\n    return schema.nodeType(json.type).create(json.attrs, content, marks)\n  }\n}\n\nexport class TextNode extends Node {\n  constructor(type, attrs, content, marks) {\n    super(type, attrs, null, marks)\n\n    if (!content) throw new RangeError(\"Empty text nodes are not allowed\")\n\n    this.text = content\n  }\n\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    return wrapMarks(this.marks, JSON.stringify(this.text))\n  }\n\n  get textContent() { return this.text }\n\n  textBetween(from, to) { return this.text.slice(from, to) }\n\n  get nodeSize() { return this.text.length }\n\n  mark(marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\n  }\n\n  withText(text) {\n    if (text == this.text) return this\n    return new TextNode(this.type, this.attrs, text, this.marks)\n  }\n\n  cut(from = 0, to = this.text.length) {\n    if (from == 0 && to == this.text.length) return this\n    return this.withText(this.text.slice(from, to))\n  }\n\n  eq(other) {\n    return this.sameMarkup(other) && this.text == other.text\n  }\n\n  toJSON() {\n    let base = super.toJSON()\n    base.text = this.text\n    return base\n  }\n}\n\nfunction wrapMarks(marks, str) {\n  for (let i = marks.length - 1; i >= 0; i--)\n    str = marks[i].type.name + \"(\" + str + \")\"\n  return str\n}\n", "import {Fragment} from \"./fragment\"\n\n// ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\nexport class ContentMatch {\n  constructor(validEnd) {\n    // :: bool\n    // True when this match state represents a valid end of the node.\n    this.validEnd = validEnd\n    this.next = []\n    this.wrapCache = []\n  }\n\n  static parse(string, nodeTypes) {\n    let stream = new TokenStream(string, nodeTypes)\n    if (stream.next == null) return ContentMatch.empty\n    let expr = parseExpr(stream)\n    if (stream.next) stream.err(\"Unexpected trailing text\")\n    let match = dfa(nfa(expr))\n    checkForDeadEnds(match, stream)\n    return match\n  }\n\n  // :: (NodeType) \u2192 ?ContentMatch\n  // Match a node type, returning a match after that node if\n  // successful.\n  matchType(type) {\n    for (let i = 0; i < this.next.length; i += 2)\n      if (this.next[i] == type) return this.next[i + 1]\n    return null\n  }\n\n  // :: (Fragment, ?number, ?number) \u2192 ?ContentMatch\n  // Try to match a fragment. Returns the resulting match when\n  // successful.\n  matchFragment(frag, start = 0, end = frag.childCount) {\n    let cur = this\n    for (let i = start; cur && i < end; i++)\n      cur = cur.matchType(frag.child(i).type)\n    return cur\n  }\n\n  get inlineContent() {\n    let first = this.next[0]\n    return first ? first.isInline : false\n  }\n\n  // :: ?NodeType\n  // Get the first matching node type at this match position that can\n  // be generated.\n  get defaultType() {\n    for (let i = 0; i < this.next.length; i += 2) {\n      let type = this.next[i]\n      if (!(type.isText || type.hasRequiredAttrs())) return type\n    }\n  }\n\n  compatible(other) {\n    for (let i = 0; i < this.next.length; i += 2)\n      for (let j = 0; j < other.next.length; j += 2)\n        if (this.next[i] == other.next[j]) return true\n    return false\n  }\n\n  // :: (Fragment, bool, ?number) \u2192 ?Fragment\n  // Try to match the given fragment, and if that fails, see if it can\n  // be made to match by inserting nodes in front of it. When\n  // successful, return a fragment of inserted nodes (which may be\n  // empty if nothing had to be inserted). When `toEnd` is true, only\n  // return a fragment if the resulting match goes to the end of the\n  // content expression.\n  fillBefore(after, toEnd = false, startIndex = 0) {\n    let seen = [this]\n    function search(match, types) {\n      let finished = match.matchFragment(after, startIndex)\n      if (finished && (!toEnd || finished.validEnd))\n        return Fragment.from(types.map(tp => tp.createAndFill()))\n\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i], next = match.next[i + 1]\n        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n          seen.push(next)\n          let found = search(next, types.concat(type))\n          if (found) return found\n        }\n      }\n    }\n\n    return search(this, [])\n  }\n\n  // :: (NodeType) \u2192 ?[NodeType]\n  // Find a set of wrapping node types that would allow a node of the\n  // given type to appear at this position. The result may be empty\n  // (when it fits directly) and will be null when no such wrapping\n  // exists.\n  findWrapping(target) {\n    for (let i = 0; i < this.wrapCache.length; i += 2)\n      if (this.wrapCache[i] == target) return this.wrapCache[i + 1]\n    let computed = this.computeWrapping(target)\n    this.wrapCache.push(target, computed)\n    return computed\n  }\n\n  computeWrapping(target) {\n    let seen = Object.create(null), active = [{match: this, type: null, via: null}]\n    while (active.length) {\n      let current = active.shift(), match = current.match\n      if (match.matchType(target)) {\n        let result = []\n        for (let obj = current; obj.type; obj = obj.via)\n          result.push(obj.type)\n        return result.reverse()\n      }\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i]\n        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n          active.push({match: type.contentMatch, type, via: current})\n          seen[type.name] = true\n        }\n      }\n    }\n  }\n\n  // :: number\n  // The number of outgoing edges this node has in the finite\n  // automaton that describes the content expression.\n  get edgeCount() {\n    return this.next.length >> 1\n  }\n\n  // :: (number) \u2192 {type: NodeType, next: ContentMatch}\n  // Get the _n_\u200Bth outgoing edge from this node in the finite\n  // automaton that describes the content expression.\n  edge(n) {\n    let i = n << 1\n    if (i >= this.next.length) throw new RangeError(`There's no ${n}th edge in this content match`)\n    return {type: this.next[i], next: this.next[i + 1]}\n  }\n\n  toString() {\n    let seen = []\n    function scan(m) {\n      seen.push(m)\n      for (let i = 1; i < m.next.length; i += 2)\n        if (seen.indexOf(m.next[i]) == -1) scan(m.next[i])\n    }\n    scan(this)\n    return seen.map((m, i) => {\n      let out = i + (m.validEnd ? \"*\" : \" \") + \" \"\n      for (let i = 0; i < m.next.length; i += 2)\n        out += (i ? \", \" : \"\") + m.next[i].name + \"->\" + seen.indexOf(m.next[i + 1])\n      return out\n    }).join(\"\\n\")\n  }\n}\n\nContentMatch.empty = new ContentMatch(true)\n\nclass TokenStream {\n  constructor(string, nodeTypes) {\n    this.string = string\n    this.nodeTypes = nodeTypes\n    this.inline = null\n    this.pos = 0\n    this.tokens = string.split(/\\s*(?=\\b|\\W|$)/)\n    if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop()\n    if (this.tokens[0] == \"\") this.tokens.shift()\n  }\n\n  get next() { return this.tokens[this.pos] }\n\n  eat(tok) { return this.next == tok && (this.pos++ || true) }\n\n  err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\") }\n}\n\nfunction parseExpr(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSeq(stream)) }\n  while (stream.eat(\"|\"))\n  return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n}\n\nfunction parseExprSeq(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSubscript(stream)) }\n  while (stream.next && stream.next != \")\" && stream.next != \"|\")\n  return exprs.length == 1 ? exprs[0] : {type: \"seq\", exprs}\n}\n\nfunction parseExprSubscript(stream) {\n  let expr = parseExprAtom(stream)\n  for (;;) {\n    if (stream.eat(\"+\"))\n      expr = {type: \"plus\", expr}\n    else if (stream.eat(\"*\"))\n      expr = {type: \"star\", expr}\n    else if (stream.eat(\"?\"))\n      expr = {type: \"opt\", expr}\n    else if (stream.eat(\"{\"))\n      expr = parseExprRange(stream, expr)\n    else break\n  }\n  return expr\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\")\n  let result = Number(stream.next)\n  stream.pos++\n  return result\n}\n\nfunction parseExprRange(stream, expr) {\n  let min = parseNum(stream), max = min\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") max = parseNum(stream)\n    else max = -1\n  }\n  if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\")\n  return {type: \"range\", min, max, expr}\n}\n\nfunction resolveName(stream, name) {\n  let types = stream.nodeTypes, type = types[name]\n  if (type) return [type]\n  let result = []\n  for (let typeName in types) {\n    let type = types[typeName]\n    if (type.groups.indexOf(name) > -1) result.push(type)\n  }\n  if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\")\n  return result\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    let expr = parseExpr(stream)\n    if (!stream.eat(\")\")) stream.err(\"Missing closing paren\")\n    return expr\n  } else if (!/\\W/.test(stream.next)) {\n    let exprs = resolveName(stream, stream.next).map(type => {\n      if (stream.inline == null) stream.inline = type.isInline\n      else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\")\n      return {type: \"name\", value: type}\n    })\n    stream.pos++\n    return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\")\n  }\n}\n\n// The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n\n// : (Object) \u2192 [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\nfunction nfa(expr) {\n  let nfa = [[]]\n  connect(compile(expr, 0), node())\n  return nfa\n\n  function node() { return nfa.push([]) - 1 }\n  function edge(from, to, term) {\n    let edge = {term, to}\n    nfa[from].push(edge)\n    return edge\n  }\n  function connect(edges, to) { edges.forEach(edge => edge.to = to) }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), [])\n    } else if (expr.type == \"seq\") {\n      for (let i = 0;; i++) {\n        let next = compile(expr.exprs[i], from)\n        if (i == expr.exprs.length - 1) return next\n        connect(next, from = node())\n      }\n    } else if (expr.type == \"star\") {\n      let loop = node()\n      edge(from, loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"plus\") {\n      let loop = node()\n      connect(compile(expr.expr, from), loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from))\n    } else if (expr.type == \"range\") {\n      let cur = from\n      for (let i = 0; i < expr.min; i++) {\n        let next = node()\n        connect(compile(expr.expr, cur), next)\n        cur = next\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur)\n      } else {\n        for (let i = expr.min; i < expr.max; i++) {\n          let next = node()\n          edge(cur, next)\n          connect(compile(expr.expr, cur), next)\n          cur = next\n        }\n      }\n      return [edge(cur)]\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)]\n    }\n  }\n}\n\nfunction cmp(a, b) { return b - a }\n\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  let result = []\n  scan(node)\n  return result.sort(cmp)\n\n  function scan(node) {\n    let edges = nfa[node]\n    if (edges.length == 1 && !edges[0].term) return scan(edges[0].to)\n    result.push(node)\n    for (let i = 0; i < edges.length; i++) {\n      let {term, to} = edges[i]\n      if (!term && result.indexOf(to) == -1) scan(to)\n    }\n  }\n}\n\n// : ([[{term: ?any, to: number}]]) \u2192 ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  let labeled = Object.create(null)\n  return explore(nullFrom(nfa, 0))\n\n  function explore(states) {\n    let out = []\n    states.forEach(node => {\n      nfa[node].forEach(({term, to}) => {\n        if (!term) return\n        let known = out.indexOf(term), set = known > -1 && out[known + 1]\n        nullFrom(nfa, to).forEach(node => {\n          if (!set) out.push(term, set = [])\n          if (set.indexOf(node) == -1) set.push(node)\n        })\n      })\n    })\n    let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1)\n    for (let i = 0; i < out.length; i += 2) {\n      let states = out[i + 1].sort(cmp)\n      state.next.push(out[i], labeled[states.join(\",\")] || explore(states))\n    }\n    return state\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (let i = 0, work = [match]; i < work.length; i++) {\n    let state = work[i], dead = !state.validEnd, nodes = []\n    for (let j = 0; j < state.next.length; j += 2) {\n      let node = state.next[j], next = state.next[j + 1]\n      nodes.push(node.name)\n      if (dead && !(node.isText || node.hasRequiredAttrs())) dead = false\n      if (work.indexOf(next) == -1) work.push(next)\n    }\n    if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\")\n  }\n}\n", "import OrderedMap from \"orderedmap\"\n\nimport {Node, TextNode} from \"./node\"\nimport {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {ContentMatch} from \"./content\"\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  let defaults = Object.create(null)\n  for (let attrName in attrs) {\n    let attr = attrs[attrName]\n    if (!attr.hasDefault) return null\n    defaults[attrName] = attr.default\n  }\n  return defaults\n}\n\nfunction computeAttrs(attrs, value) {\n  let built = Object.create(null)\n  for (let name in attrs) {\n    let given = value && value[name]\n    if (given === undefined) {\n      let attr = attrs[name]\n      if (attr.hasDefault) given = attr.default\n      else throw new RangeError(\"No value supplied for attribute \" + name)\n    }\n    built[name] = given\n  }\n  return built\n}\n\nfunction initAttrs(attrs) {\n  let result = Object.create(null)\n  if (attrs) for (let name in attrs) result[name] = new Attribute(attrs[name])\n  return result\n}\n\n// ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\nexport class NodeType {\n  constructor(name, schema, spec) {\n    // :: string\n    // The name the node type has in this schema.\n    this.name = name\n\n    // :: Schema\n    // A link back to the `Schema` the node type belongs to.\n    this.schema = schema\n\n    // :: NodeSpec\n    // The spec that this type is based on\n    this.spec = spec\n\n    this.groups = spec.group ? spec.group.split(\" \") : []\n    this.attrs = initAttrs(spec.attrs)\n\n    this.defaultAttrs = defaultAttrs(this.attrs)\n\n    // :: ContentMatch\n    // The starting match of the node type's content expression.\n    this.contentMatch = null\n\n    // : ?[MarkType]\n    // The set of marks allowed in this node. `null` means all marks\n    // are allowed.\n    this.markSet = null\n\n    // :: bool\n    // True if this node type has inline content.\n    this.inlineContent = null\n\n    // :: bool\n    // True if this is a block type\n    this.isBlock = !(spec.inline || name == \"text\")\n\n    // :: bool\n    // True if this is the text node type.\n    this.isText = name == \"text\"\n  }\n\n  // :: bool\n  // True if this is an inline type.\n  get isInline() { return !this.isBlock }\n\n  // :: bool\n  // True if this is a textblock type, a block that contains inline\n  // content.\n  get isTextblock() { return this.isBlock && this.inlineContent }\n\n  // :: bool\n  // True for node types that allow no content.\n  get isLeaf() { return this.contentMatch == ContentMatch.empty }\n\n  // :: bool\n  // True when this node is an atom, i.e. when it does not have\n  // directly editable content.\n  get isAtom() { return this.isLeaf || this.spec.atom }\n\n  // :: () \u2192 bool\n  // Tells you whether this node type has any required attributes.\n  hasRequiredAttrs() {\n    for (let n in this.attrs) if (this.attrs[n].isRequired) return true\n    return false\n  }\n\n  compatibleContent(other) {\n    return this == other || this.contentMatch.compatible(other.contentMatch)\n  }\n\n  computeAttrs(attrs) {\n    if (!attrs && this.defaultAttrs) return this.defaultAttrs\n    else return computeAttrs(this.attrs, attrs)\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 Node\n  // Create a `Node` of this type. The given attributes are\n  // checked and defaulted (you can pass `null` to use the type's\n  // defaults entirely, if no required attributes exist). `content`\n  // may be a `Fragment`, a node, an array of nodes, or\n  // `null`. Similarly `marks` may be `null` to default to the empty\n  // set of marks.\n  create(attrs, content, marks) {\n    if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\")\n    return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 Node\n  // Like [`create`](#model.NodeType.create), but check the given content\n  // against the node type's content restrictions, and throw an error\n  // if it doesn't match.\n  createChecked(attrs, content, marks) {\n    content = Fragment.from(content)\n    if (!this.validContent(content))\n      throw new RangeError(\"Invalid content for node \" + this.name)\n    return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 ?Node\n  // Like [`create`](#model.NodeType.create), but see if it is necessary to\n  // add nodes to the start or end of the given fragment to make it\n  // fit the node. If no fitting wrapping can be found, return null.\n  // Note that, due to the fact that required nodes can always be\n  // created, this will always succeed if you pass null or\n  // `Fragment.empty` as content.\n  createAndFill(attrs, content, marks) {\n    attrs = this.computeAttrs(attrs)\n    content = Fragment.from(content)\n    if (content.size) {\n      let before = this.contentMatch.fillBefore(content)\n      if (!before) return null\n      content = before.append(content)\n    }\n    let after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true)\n    if (!after) return null\n    return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\n  }\n\n  // :: (Fragment) \u2192 bool\n  // Returns true if the given fragment is valid content for this node\n  // type with the given attributes.\n  validContent(content) {\n    let result = this.contentMatch.matchFragment(content)\n    if (!result || !result.validEnd) return false\n    for (let i = 0; i < content.childCount; i++)\n      if (!this.allowsMarks(content.child(i).marks)) return false\n    return true\n  }\n\n  // :: (MarkType) \u2192 bool\n  // Check whether the given mark type is allowed in this node.\n  allowsMarkType(markType) {\n    return this.markSet == null || this.markSet.indexOf(markType) > -1\n  }\n\n  // :: ([Mark]) \u2192 bool\n  // Test whether the given set of marks are allowed in this node.\n  allowsMarks(marks) {\n    if (this.markSet == null) return true\n    for (let i = 0; i < marks.length; i++) if (!this.allowsMarkType(marks[i].type)) return false\n    return true\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // Removes the marks that are not allowed in this node from the given set.\n  allowedMarks(marks) {\n    if (this.markSet == null) return marks\n    let copy\n    for (let i = 0; i < marks.length; i++) {\n      if (!this.allowsMarkType(marks[i].type)) {\n        if (!copy) copy = marks.slice(0, i)\n      } else if (copy) {\n        copy.push(marks[i])\n      }\n    }\n    return !copy ? marks : copy.length ? copy : Mark.empty\n  }\n\n  static compile(nodes, schema) {\n    let result = Object.create(null)\n    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec))\n\n    let topType = schema.spec.topNode || \"doc\"\n    if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\")\n    if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\")\n    for (let _ in result.text.attrs) throw new RangeError(\"The text node type should not have attributes\")\n\n    return result\n  }\n}\n\n// Attribute descriptors\n\nclass Attribute {\n  constructor(options) {\n    this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\")\n    this.default = options.default\n  }\n\n  get isRequired() {\n    return !this.hasDefault\n  }\n}\n\n// Marks\n\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\nexport class MarkType {\n  constructor(name, rank, schema, spec) {\n    // :: string\n    // The name of the mark type.\n    this.name = name\n\n    // :: Schema\n    // The schema that this mark type instance is part of.\n    this.schema = schema\n\n    // :: MarkSpec\n    // The spec on which the type is based.\n    this.spec = spec\n\n    this.attrs = initAttrs(spec.attrs)\n\n    this.rank = rank\n    this.excluded = null\n    let defaults = defaultAttrs(this.attrs)\n    this.instance = defaults && new Mark(this, defaults)\n  }\n\n  // :: (?Object) \u2192 Mark\n  // Create a mark of this type. `attrs` may be `null` or an object\n  // containing only some of the mark's attributes. The others, if\n  // they have defaults, will be added.\n  create(attrs) {\n    if (!attrs && this.instance) return this.instance\n    return new Mark(this, computeAttrs(this.attrs, attrs))\n  }\n\n  static compile(marks, schema) {\n    let result = Object.create(null), rank = 0\n    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec))\n    return result\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // When there is a mark of this type in the given set, a new set\n  // without it is returned. Otherwise, the input set is returned.\n  removeFromSet(set) {\n    for (var i = 0; i < set.length; i++) if (set[i].type == this) {\n      set = set.slice(0, i).concat(set.slice(i + 1))\n      i--\n    }\n    return set\n  }\n\n  // :: ([Mark]) \u2192 ?Mark\n  // Tests whether there is a mark of this type in the given set.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (set[i].type == this) return set[i]\n  }\n\n  // :: (MarkType) \u2192 bool\n  // Queries whether a given mark type is\n  // [excluded](#model.MarkSpec.excludes) by this one.\n  excludes(other) {\n    return this.excluded.indexOf(other) > -1\n  }\n}\n\n// SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant\u2014it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) \u2192 DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (\u201Chole\u201D) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   spanning:: ?bool\n//   Determines whether marks of this type can span multiple adjacent\n//   nodes when serialized to DOM/HTML. Defaults to true.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) \u2192 DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\nexport class Schema {\n  // :: (SchemaSpec)\n  // Construct a schema from a schema [specification](#model.SchemaSpec).\n  constructor(spec) {\n    // :: SchemaSpec\n    // The [spec](#model.SchemaSpec) on which the schema is based,\n    // with the added guarantee that its `nodes` and `marks`\n    // properties are\n    // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n    // (not raw objects).\n    this.spec = {}\n    for (let prop in spec) this.spec[prop] = spec[prop]\n    this.spec.nodes = OrderedMap.from(spec.nodes)\n    this.spec.marks = OrderedMap.from(spec.marks)\n\n    // :: Object<NodeType>\n    // An object mapping the schema's node names to node type objects.\n    this.nodes = NodeType.compile(this.spec.nodes, this)\n\n    // :: Object<MarkType>\n    // A map from mark names to mark type objects.\n    this.marks = MarkType.compile(this.spec.marks, this)\n\n    let contentExprCache = Object.create(null)\n    for (let prop in this.nodes) {\n      if (prop in this.marks)\n        throw new RangeError(prop + \" can not be both a node and a mark\")\n      let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks\n      type.contentMatch = contentExprCache[contentExpr] ||\n        (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes))\n      type.inlineContent = type.contentMatch.inlineContent\n      type.markSet = markExpr == \"_\" ? null :\n        markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n        markExpr == \"\" || !type.inlineContent ? [] : null\n    }\n    for (let prop in this.marks) {\n      let type = this.marks[prop], excl = type.spec.excludes\n      type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"))\n    }\n\n    this.nodeFromJSON = this.nodeFromJSON.bind(this)\n    this.markFromJSON = this.markFromJSON.bind(this)\n\n    // :: NodeType\n    // The type of the [default top node](#model.SchemaSpec.topNode)\n    // for this schema.\n    this.topNodeType = this.nodes[this.spec.topNode || \"doc\"]\n\n    // :: Object\n    // An object for storing whatever values modules may want to\n    // compute and cache per schema. (If you want to store something\n    // in it, try to use property names unlikely to clash.)\n    this.cached = Object.create(null)\n    this.cached.wrappings = Object.create(null)\n  }\n\n  // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 Node\n  // Create a node in this schema. The `type` may be a string or a\n  // `NodeType` instance. Attributes will be extended\n  // with defaults, `content` may be a `Fragment`,\n  // `null`, a `Node`, or an array of nodes.\n  node(type, attrs, content, marks) {\n    if (typeof type == \"string\")\n      type = this.nodeType(type)\n    else if (!(type instanceof NodeType))\n      throw new RangeError(\"Invalid node type: \" + type)\n    else if (type.schema != this)\n      throw new RangeError(\"Node type from different schema used (\" + type.name + \")\")\n\n    return type.createChecked(attrs, content, marks)\n  }\n\n  // :: (string, ?[Mark]) \u2192 Node\n  // Create a text node in the schema. Empty text nodes are not\n  // allowed.\n  text(text, marks) {\n    let type = this.nodes.text\n    return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks))\n  }\n\n  // :: (union<string, MarkType>, ?Object) \u2192 Mark\n  // Create a mark with the given type and attributes.\n  mark(type, attrs) {\n    if (typeof type == \"string\") type = this.marks[type]\n    return type.create(attrs)\n  }\n\n  // :: (Object) \u2192 Node\n  // Deserialize a node from its JSON representation. This method is\n  // bound.\n  nodeFromJSON(json) {\n    return Node.fromJSON(this, json)\n  }\n\n  // :: (Object) \u2192 Mark\n  // Deserialize a mark from its JSON representation. This method is\n  // bound.\n  markFromJSON(json) {\n    return Mark.fromJSON(this, json)\n  }\n\n  nodeType(name) {\n    let found = this.nodes[name]\n    if (!found) throw new RangeError(\"Unknown node type: \" + name)\n    return found\n  }\n}\n\nfunction gatherMarks(schema, marks) {\n  let found = []\n  for (let i = 0; i < marks.length; i++) {\n    let name = marks[i], mark = schema.marks[name], ok = mark\n    if (mark) {\n      found.push(mark)\n    } else {\n      for (let prop in schema.marks) {\n        let mark = schema.marks[prop]\n        if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n          found.push(ok = mark)\n      }\n    }\n    if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\")\n  }\n  return found\n}\n", "import {Fragment} from \"./fragment\"\nimport {Slice} from \"./replace\"\nimport {Mark} from \"./mark\"\n\n// ParseOptions:: interface\n// These are the options recognized by the\n// [`parse`](#model.DOMParser.parse) and\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   By default, whitespace is collapsed as per HTML's rules. Pass\n//   `true` to preserve whitespace, but normalize newlines to\n//   spaces, and `\"full\"` to preserve whitespace entirely.\n//\n//   findPositions:: ?[{node: dom.Node, offset: number}]\n//   When given, the parser will, beside parsing the content,\n//   record the document positions of the given DOM positions. It\n//   will do so by writing to the objects, adding a `pos` property\n//   that holds the document position. DOM positions that are not\n//   in the parsed content will not be written to.\n//\n//   from:: ?number\n//   The child node index to start parsing from.\n//\n//   to:: ?number\n//   The child node index to stop parsing at.\n//\n//   topNode:: ?Node\n//   By default, the content is parsed into the schema's default\n//   [top node type](#model.Schema.topNodeType). You can pass this\n//   option to use the type and attributes from a different node\n//   as the top container.\n//\n//   topMatch:: ?ContentMatch\n//   Provide the starting content match that content parsed into the\n//   top node is matched against.\n//\n//   context:: ?ResolvedPos\n//   A set of additional nodes to count as\n//   [context](#model.ParseRule.context) when parsing, above the\n//   given [top node](#model.ParseOptions.topNode).\n\n// ParseRule:: interface\n// A value that describes how to parse a given DOM node or inline\n// style as a ProseMirror node or mark.\n//\n//   tag:: ?string\n//   A CSS selector describing the kind of DOM elements to match. A\n//   single rule should have _either_ a `tag` or a `style` property.\n//\n//   namespace:: ?string\n//   The namespace to match. This should be used with `tag`.\n//   Nodes are only matched when the namespace matches or this property\n//   is null.\n//\n//   style:: ?string\n//   A CSS property name to match. When given, this rule matches\n//   inline styles that list that property. May also have the form\n//   `\"property=value\"`, in which case the rule only matches if the\n//   property's value exactly matches the given value. (For more\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n//   and return false to indicate that the match failed.) Rules\n//   matching styles may only produce [marks](#model.ParseRule.mark),\n//   not nodes.\n//\n//   priority:: ?number\n//   Can be used to change the order in which the parse rules in a\n//   schema are tried. Those with higher priority come first. Rules\n//   without a priority are counted as having priority 50. This\n//   property is only meaningful in a schema\u2014when directly\n//   constructing a parser, the order of the rule array is used.\n//\n//   consuming:: ?boolean\n//   By default, when a rule matches an element or style, no further\n//   rules get a chance to match it. By setting this to `false`, you\n//   indicate that even when this rule matches, other rules that come\n//   after it should also run.\n//\n//   context:: ?string\n//   When given, restricts this rule to only match when the current\n//   context\u2014the parent nodes into which the content is being\n//   parsed\u2014matches this expression. Should contain one or more node\n//   names or node group names followed by single or double slashes.\n//   For example `\"paragraph/\"` means the rule only matches when the\n//   parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n//   it to be in a paragraph that is inside a blockquote, and\n//   `\"section//\"` matches any position inside a section\u2014a double\n//   slash matches any sequence of ancestor nodes. To allow multiple\n//   different contexts, they can be separated by a pipe (`|`)\n//   character, as in `\"blockquote/|list_item/\"`.\n//\n//   node:: ?string\n//   The name of the node type to create when this rule matches. Only\n//   valid for rules with a `tag` property, not for style rules. Each\n//   rule should have one of a `node`, `mark`, or `ignore` property\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n//   or `mark` property will be derived from its position).\n//\n//   mark:: ?string\n//   The name of the mark type to wrap the matched content in.\n//\n//   ignore:: ?bool\n//   When true, ignore content that matches this rule.\n//\n//   closeParent:: ?bool\n//   When true, finding an element that matches this rule will close\n//   the current node.\n//\n//   skip:: ?bool\n//   When true, ignore the node that matches this rule, but do parse\n//   its content.\n//\n//   attrs:: ?Object\n//   Attributes for the node or mark created by this rule. When\n//   `getAttrs` is provided, it takes precedence.\n//\n//   getAttrs:: ?(union<dom.Node, string>) \u2192 ?union<Object, false>\n//   A function used to compute the attributes for the node or mark\n//   created by this rule. Can also be used to describe further\n//   conditions the DOM element or style must match. When it returns\n//   `false`, the rule won't match. When it returns null or undefined,\n//   that is interpreted as an empty/default set of attributes.\n//\n//   Called with a DOM Element for `tag` rules, and with a string (the\n//   style's value) for `style` rules.\n//\n//   contentElement:: ?union<string, (dom.Node) \u2192 dom.Node>\n//   For `tag` rules that produce non-leaf nodes or marks, by default\n//   the content of the DOM element is parsed as content of the mark\n//   or node. If the child nodes are in a descendent node, this may be\n//   a CSS selector string that the parser must use to find the actual\n//   content element, or a function that returns the actual content\n//   element to the parser.\n//\n//   getContent:: ?(dom.Node, schema: Schema) \u2192 Fragment\n//   Can be used to override the content of a matched node. When\n//   present, instead of parsing the node's child nodes, the result of\n//   this function is used.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   Controls whether whitespace should be preserved when parsing the\n//   content inside the matched element. `false` means whitespace may\n//   be collapsed, `true` means that whitespace should be preserved\n//   but newlines normalized to spaces, and `\"full\"` means that\n//   newlines should also be preserved.\n\n// ::- A DOM parser represents a strategy for parsing DOM content into\n// a ProseMirror document conforming to a given schema. Its behavior\n// is defined by an array of [rules](#model.ParseRule).\nexport class DOMParser {\n  // :: (Schema, [ParseRule])\n  // Create a parser that targets the given schema, using the given\n  // parsing rules.\n  constructor(schema, rules) {\n    // :: Schema\n    // The schema into which the parser parses.\n    this.schema = schema\n    // :: [ParseRule]\n    // The set of [parse rules](#model.ParseRule) that the parser\n    // uses, in order of precedence.\n    this.rules = rules\n    this.tags = []\n    this.styles = []\n\n    rules.forEach(rule => {\n      if (rule.tag) this.tags.push(rule)\n      else if (rule.style) this.styles.push(rule)\n    })\n\n    // Only normalize list elements when lists in the schema can't directly contain themselves\n    this.normalizeLists = !this.tags.some(r => {\n      if (!/^(ul|ol)\\b/.test(r.tag) || !r.node) return false\n      let node = schema.nodes[r.node]\n      return node.contentMatch.matchType(node)\n    })\n  }\n\n  // :: (dom.Node, ?ParseOptions) \u2192 Node\n  // Parse a document from the content of a DOM node.\n  parse(dom, options = {}) {\n    let context = new ParseContext(this, options, false)\n    context.addAll(dom, null, options.from, options.to)\n    return context.finish()\n  }\n\n  // :: (dom.Node, ?ParseOptions) \u2192 Slice\n  // Parses the content of the given DOM node, like\n  // [`parse`](#model.DOMParser.parse), and takes the same set of\n  // options. But unlike that method, which produces a whole node,\n  // this one returns a slice that is open at the sides, meaning that\n  // the schema constraints aren't applied to the start of nodes to\n  // the left of the input and the end of nodes at the end.\n  parseSlice(dom, options = {}) {\n    let context = new ParseContext(this, options, true)\n    context.addAll(dom, null, options.from, options.to)\n    return Slice.maxOpen(context.finish())\n  }\n\n  matchTag(dom, context, after) {\n    for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n      let rule = this.tags[i]\n      if (matches(dom, rule.tag) &&\n          (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n          (!rule.context || context.matchesContext(rule.context))) {\n        if (rule.getAttrs) {\n          let result = rule.getAttrs(dom)\n          if (result === false) continue\n          rule.attrs = result\n        }\n        return rule\n      }\n    }\n  }\n\n  matchStyle(prop, value, context, after) {\n    for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n      let rule = this.styles[i]\n      if (rule.style.indexOf(prop) != 0 ||\n          rule.context && !context.matchesContext(rule.context) ||\n          // Test that the style string either precisely matches the prop,\n          // or has an '=' sign after the prop, followed by the given\n          // value.\n          rule.style.length > prop.length &&\n          (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))\n        continue\n      if (rule.getAttrs) {\n        let result = rule.getAttrs(value)\n        if (result === false) continue\n        rule.attrs = result\n      }\n      return rule\n    }\n  }\n\n  // : (Schema) \u2192 [ParseRule]\n  static schemaRules(schema) {\n    let result = []\n    function insert(rule) {\n      let priority = rule.priority == null ? 50 : rule.priority, i = 0\n      for (; i < result.length; i++) {\n        let next = result[i], nextPriority = next.priority == null ? 50 : next.priority\n        if (nextPriority < priority) break\n      }\n      result.splice(i, 0, rule)\n    }\n\n    for (let name in schema.marks) {\n      let rules = schema.marks[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.mark = name\n      })\n    }\n    for (let name in schema.nodes) {\n      let rules = schema.nodes[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.node = name\n      })\n    }\n    return result\n  }\n\n  // :: (Schema) \u2192 DOMParser\n  // Construct a DOM parser using the parsing rules listed in a\n  // schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n  // [priority](#model.ParseRule.priority).\n  static fromSchema(schema) {\n    return schema.cached.domParser ||\n      (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))\n  }\n}\n\n// : Object<bool> The block-level tags in HTML5\nconst blockTags = {\n  address: true, article: true, aside: true, blockquote: true, canvas: true,\n  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n}\n\n// : Object<bool> The tags that we normally ignore.\nconst ignoreTags = {\n  head: true, noscript: true, object: true, script: true, style: true, title: true\n}\n\n// : Object<bool> List tags.\nconst listTags = {ol: true, ul: true}\n\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4\n\nfunction wsOptionsFor(preserveWhitespace) {\n  return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0)\n}\n\nclass NodeContext {\n  constructor(type, attrs, marks, pendingMarks, solid, match, options) {\n    this.type = type\n    this.attrs = attrs\n    this.solid = solid\n    this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch)\n    this.options = options\n    this.content = []\n    // Marks applied to this node itself\n    this.marks = marks\n    // Marks applied to its children\n    this.activeMarks = Mark.none\n    // Marks that can't apply here, but will be used in children if possible\n    this.pendingMarks = pendingMarks\n    // Nested Marks with same type\n    this.stashMarks = []\n  }\n\n  findWrapping(node) {\n    if (!this.match) {\n      if (!this.type) return []\n      let fill = this.type.contentMatch.fillBefore(Fragment.from(node))\n      if (fill) {\n        this.match = this.type.contentMatch.matchFragment(fill)\n      } else {\n        let start = this.type.contentMatch, wrap\n        if (wrap = start.findWrapping(node.type)) {\n          this.match = start\n          return wrap\n        } else {\n          return null\n        }\n      }\n    }\n    return this.match.findWrapping(node.type)\n  }\n\n  finish(openEnd) {\n    if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n      let last = this.content[this.content.length - 1], m\n      if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n        if (last.text.length == m[0].length) this.content.pop()\n        else this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length))\n      }\n    }\n    let content = Fragment.from(this.content)\n    if (!openEnd && this.match)\n      content = content.append(this.match.fillBefore(Fragment.empty, true))\n    return this.type ? this.type.create(this.attrs, content, this.marks) : content\n  }\n\n  popFromStashMark(mark) {\n    for (let i = this.stashMarks.length - 1; i >= 0; i--)\n      if (mark.eq(this.stashMarks[i])) return this.stashMarks.splice(i, 1)[0]\n  }\n\n  applyPending(nextType) {\n    for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n      let mark = pending[i]\n      if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&\n          !mark.isInSet(this.activeMarks)) {\n        this.activeMarks = mark.addToSet(this.activeMarks)\n        this.pendingMarks = mark.removeFromSet(this.pendingMarks)\n      }\n    }\n  }\n}\n\nclass ParseContext {\n  // : (DOMParser, Object)\n  constructor(parser, options, open) {\n    // : DOMParser The parser we are using.\n    this.parser = parser\n    // : Object The options passed to this parse.\n    this.options = options\n    this.isOpen = open\n    let topNode = options.topNode, topContext\n    let topOptions = wsOptionsFor(options.preserveWhitespace) | (open ? OPT_OPEN_LEFT : 0)\n    if (topNode)\n      topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true,\n                                   options.topMatch || topNode.type.contentMatch, topOptions)\n    else if (open)\n      topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions)\n    else\n      topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions)\n    this.nodes = [topContext]\n    // : [Mark] The current set of marks\n    this.open = 0\n    this.find = options.findPositions\n    this.needsBlock = false\n  }\n\n  get top() {\n    return this.nodes[this.open]\n  }\n\n  // : (dom.Node)\n  // Add a DOM node to the content. Text is inserted as text node,\n  // otherwise, the node is passed to `addElement` or, if it has a\n  // `style` attribute, `addElementWithStyles`.\n  addDOM(dom) {\n    if (dom.nodeType == 3) {\n      this.addTextNode(dom)\n    } else if (dom.nodeType == 1) {\n      let style = dom.getAttribute(\"style\")\n      let marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.addPendingMark(marks[i])\n      this.addElement(dom)\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.removePendingMark(marks[i], top)\n    }\n  }\n\n  addTextNode(dom) {\n    let value = dom.nodeValue\n    let top = this.top\n    if ((top.type ? top.type.inlineContent : top.content.length && top.content[0].isInline) || /[^ \\t\\r\\n\\u000c]/.test(value)) {\n      if (!(top.options & OPT_PRESERVE_WS)) {\n        value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \")\n        // If this starts with whitespace, and there is no node before it, or\n        // a hard break, or a text node that ends with whitespace, strip the\n        // leading space.\n        if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n          let nodeBefore = top.content[top.content.length - 1]\n          let domNodeBefore = dom.previousSibling\n          if (!nodeBefore ||\n              (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n              (nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)))\n            value = value.slice(1)\n        }\n      } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n        value = value.replace(/\\r?\\n|\\r/g, \" \")\n      }\n      if (value) this.insertNode(this.parser.schema.text(value))\n      this.findInText(dom)\n    } else {\n      this.findInside(dom)\n    }\n  }\n\n  // : (dom.Element, ?ParseRule)\n  // Try to find a handler for the given tag and use that to parse. If\n  // none is found, the element's content nodes are added directly.\n  addElement(dom, matchAfter) {\n    let name = dom.nodeName.toLowerCase(), ruleID\n    if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) normalizeList(dom)\n    let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||\n        (ruleID = this.parser.matchTag(dom, this, matchAfter))\n    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n      this.findInside(dom)\n    } else if (!rule || rule.skip || rule.closeParent) {\n      if (rule && rule.closeParent) this.open = Math.max(0, this.open - 1)\n      else if (rule && rule.skip.nodeType) dom = rule.skip\n      let sync, top = this.top, oldNeedsBlock = this.needsBlock\n      if (blockTags.hasOwnProperty(name)) {\n        sync = true\n        if (!top.type) this.needsBlock = true\n      } else if (!dom.firstChild) {\n        this.leafFallback(dom)\n        return\n      }\n      this.addAll(dom)\n      if (sync) this.sync(top)\n      this.needsBlock = oldNeedsBlock\n    } else {\n      this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : null)\n    }\n  }\n\n  // Called for leaf DOM nodes that would otherwise be ignored\n  leafFallback(dom) {\n    if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent)\n      this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"))\n  }\n\n  // Run any style parser associated with the node's styles. Either\n  // return an array of marks, or null to indicate some of the styles\n  // had a rule with `ignore` set.\n  readStyles(styles) {\n    let marks = Mark.none\n    style: for (let i = 0; i < styles.length; i += 2) {\n      for (let after = null;;) {\n        let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after)\n        if (!rule) continue style\n        if (rule.ignore) return null\n        marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks)\n        if (rule.consuming === false) after = rule\n        else break\n      }\n    }\n    return marks\n  }\n\n  // : (dom.Element, ParseRule) \u2192 bool\n  // Look up a handler for the given node. If none are found, return\n  // false. Otherwise, apply it, use its return value to drive the way\n  // the node's content is wrapped, and return true.\n  addElementByRule(dom, rule, continueAfter) {\n    let sync, nodeType, markType, mark\n    if (rule.node) {\n      nodeType = this.parser.schema.nodes[rule.node]\n      if (!nodeType.isLeaf) {\n        sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace)\n      } else if (!this.insertNode(nodeType.create(rule.attrs))) {\n        this.leafFallback(dom)\n      }\n    } else {\n      markType = this.parser.schema.marks[rule.mark]\n      mark = markType.create(rule.attrs)\n      this.addPendingMark(mark)\n    }\n    let startIn = this.top\n\n    if (nodeType && nodeType.isLeaf) {\n      this.findInside(dom)\n    } else if (continueAfter) {\n      this.addElement(dom, continueAfter)\n    } else if (rule.getContent) {\n      this.findInside(dom)\n      rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node))\n    } else {\n      let contentDOM = rule.contentElement\n      if (typeof contentDOM == \"string\") contentDOM = dom.querySelector(contentDOM)\n      else if (typeof contentDOM == \"function\") contentDOM = contentDOM(dom)\n      if (!contentDOM) contentDOM = dom\n      this.findAround(dom, contentDOM, true)\n      this.addAll(contentDOM, sync)\n    }\n    if (sync) { this.sync(startIn); this.open-- }\n    if (mark) this.removePendingMark(mark, startIn)\n  }\n\n  // : (dom.Node, ?NodeBuilder, ?number, ?number)\n  // Add all child nodes between `startIndex` and `endIndex` (or the\n  // whole node, if not given). If `sync` is passed, use it to\n  // synchronize after every block element.\n  addAll(parent, sync, startIndex, endIndex) {\n    let index = startIndex || 0\n    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,\n             end = endIndex == null ? null : parent.childNodes[endIndex];\n         dom != end; dom = dom.nextSibling, ++index) {\n      this.findAtPoint(parent, index)\n      this.addDOM(dom)\n      if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))\n        this.sync(sync)\n    }\n    this.findAtPoint(parent, index)\n  }\n\n  // Try to find a way to fit the given node type into the current\n  // context. May add intermediate wrappers and/or leave non-solid\n  // nodes that we're in.\n  findPlace(node) {\n    let route, sync\n    for (let depth = this.open; depth >= 0; depth--) {\n      let cx = this.nodes[depth]\n      let found = cx.findWrapping(node)\n      if (found && (!route || route.length > found.length)) {\n        route = found\n        sync = cx\n        if (!found.length) break\n      }\n      if (cx.solid) break\n    }\n    if (!route) return false\n    this.sync(sync)\n    for (let i = 0; i < route.length; i++)\n      this.enterInner(route[i], null, false)\n    return true\n  }\n\n  // : (Node) \u2192 ?Node\n  // Try to insert the given node, adjusting the context when needed.\n  insertNode(node) {\n    if (node.isInline && this.needsBlock && !this.top.type) {\n      let block = this.textblockFromContext()\n      if (block) this.enterInner(block)\n    }\n    if (this.findPlace(node)) {\n      this.closeExtra()\n      let top = this.top\n      top.applyPending(node.type)\n      if (top.match) top.match = top.match.matchType(node.type)\n      let marks = top.activeMarks\n      for (let i = 0; i < node.marks.length; i++)\n        if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n          marks = node.marks[i].addToSet(marks)\n      top.content.push(node.mark(marks))\n      return true\n    }\n    return false\n  }\n\n  // : (NodeType, ?Object) \u2192 bool\n  // Try to start a node of the given type, adjusting the context when\n  // necessary.\n  enter(type, attrs, preserveWS) {\n    let ok = this.findPlace(type.create(attrs))\n    if (ok) this.enterInner(type, attrs, true, preserveWS)\n    return ok\n  }\n\n  // Open a node of the given type\n  enterInner(type, attrs, solid, preserveWS) {\n    this.closeExtra()\n    let top = this.top\n    top.applyPending(type)\n    top.match = top.match && top.match.matchType(type, attrs)\n    let options = preserveWS == null ? top.options & ~OPT_OPEN_LEFT : wsOptionsFor(preserveWS)\n    if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) options |= OPT_OPEN_LEFT\n    this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options))\n    this.open++\n  }\n\n  // Make sure all nodes above this.open are finished and added to\n  // their parents\n  closeExtra(openEnd) {\n    let i = this.nodes.length - 1\n    if (i > this.open) {\n      for (; i > this.open; i--) this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd))\n      this.nodes.length = this.open + 1\n    }\n  }\n\n  finish() {\n    this.open = 0\n    this.closeExtra(this.isOpen)\n    return this.nodes[0].finish(this.isOpen || this.options.topOpen)\n  }\n\n  sync(to) {\n    for (let i = this.open; i >= 0; i--) if (this.nodes[i] == to) {\n      this.open = i\n      return\n    }\n  }\n\n  get currentPos() {\n    this.closeExtra()\n    let pos = 0\n    for (let i = this.open; i >= 0; i--) {\n      let content = this.nodes[i].content\n      for (let j = content.length - 1; j >= 0; j--)\n        pos += content[j].nodeSize\n      if (i) pos++\n    }\n    return pos\n  }\n\n  findAtPoint(parent, offset) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == parent && this.find[i].offset == offset)\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findInside(parent) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findAround(parent, content, before) {\n    if (parent != content && this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n        let pos = content.compareDocumentPosition(this.find[i].node)\n        if (pos & (before ? 2 : 4))\n          this.find[i].pos = this.currentPos\n      }\n    }\n  }\n\n  findInText(textNode) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == textNode)\n        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset)\n    }\n  }\n\n  // : (string) \u2192 bool\n  // Determines whether the given [context\n  // string](#ParseRule.context) matches this context.\n  matchesContext(context) {\n    if (context.indexOf(\"|\") > -1)\n      return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this)\n\n    let parts = context.split(\"/\")\n    let option = this.options.context\n    let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type)\n    let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1)\n    let match = (i, depth) => {\n      for (; i >= 0; i--) {\n        let part = parts[i]\n        if (part == \"\") {\n          if (i == parts.length - 1 || i == 0) continue\n          for (; depth >= minDepth; depth--)\n            if (match(i - 1, depth)) return true\n          return false\n        } else {\n          let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type\n              : option && depth >= minDepth ? option.node(depth - minDepth).type\n              : null\n          if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n            return false\n          depth--\n        }\n      }\n      return true\n    }\n    return match(parts.length - 1, this.open)\n  }\n\n  textblockFromContext() {\n    let $context = this.options.context\n    if ($context) for (let d = $context.depth; d >= 0; d--) {\n      let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType\n      if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt\n    }\n    for (let name in this.parser.schema.nodes) {\n      let type = this.parser.schema.nodes[name]\n      if (type.isTextblock && type.defaultAttrs) return type\n    }\n  }\n\n  addPendingMark(mark) {\n    let found = findSameMarkInSet(mark, this.top.pendingMarks)\n    if (found) this.top.stashMarks.push(found)\n    this.top.pendingMarks = mark.addToSet(this.top.pendingMarks)\n  }\n\n  removePendingMark(mark, upto) {\n    for (let depth = this.open; depth >= 0; depth--) {\n      let level = this.nodes[depth]\n      let found = level.pendingMarks.lastIndexOf(mark)\n      if (found > -1) {\n        level.pendingMarks = mark.removeFromSet(level.pendingMarks)\n      } else {\n        level.activeMarks = mark.removeFromSet(level.activeMarks)\n        let stashMark = level.popFromStashMark(mark)\n        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))\n          level.activeMarks = stashMark.addToSet(level.activeMarks)\n      }\n      if (level == upto) break\n    }\n  }\n}\n\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child)\n      child = prevItem\n    } else if (name == \"li\") {\n      prevItem = child\n    } else if (name) {\n      prevItem = null\n    }\n  }\n}\n\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)\n}\n\n// : (string) \u2192 [string]\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n  let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = []\n  while (m = re.exec(style)) result.push(m[1], m[2].trim())\n  return result\n}\n\nfunction copy(obj) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  return copy\n}\n\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n  let nodes = nodeType.schema.nodes\n  for (let name in nodes) {\n    let parent = nodes[name]\n    if (!parent.allowsMarkType(markType)) continue\n    let seen = [], scan = match => {\n      seen.push(match)\n      for (let i = 0; i < match.edgeCount; i++) {\n        let {type, next} = match.edge(i)\n        if (type == nodeType) return true\n        if (seen.indexOf(next) < 0 && scan(next)) return true\n      }\n    }\n    if (scan(parent.contentMatch)) return true\n  }\n}\n\nfunction findSameMarkInSet(mark, set) {\n  for (let i = 0; i < set.length; i++) {\n    if (mark.eq(set[i])) return set[i]\n  }\n}\n", "// DOMOutputSpec:: interface\n// A description of a DOM structure. Can be either a string, which is\n// interpreted as a text node, a DOM node, which is interpreted as\n// itself, a `{dom: Node, contentDOM: ?Node}` object, or an array.\n//\n// An array describes a DOM element. The first value in the array\n// should be a string\u2014the name of the DOM element, optionally prefixed\n// by a namespace URL and a space. If the second element is plain\n// object, it is interpreted as a set of attributes for the element.\n// Any elements after that (including the 2nd if it's not an attribute\n// object) are interpreted as children of the DOM elements, and must\n// either be valid `DOMOutputSpec` values, or the number zero.\n//\n// The number zero (pronounced \u201Chole\u201D) is used to indicate the place\n// where a node's child nodes should be inserted. If it occurs in an\n// output spec, it should be the only child element in its parent\n// node.\n\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\n// marks of various types to DOM nodes.\nexport class DOMSerializer {\n  // :: (Object<(node: Node) \u2192 DOMOutputSpec>, Object<?(mark: Mark, inline: bool) \u2192 DOMOutputSpec>)\n  // Create a serializer. `nodes` should map node names to functions\n  // that take a node and return a description of the corresponding\n  // DOM. `marks` does the same for mark names, but also gets an\n  // argument that tells it whether the mark's content is block or\n  // inline content (for typical use, it'll always be inline). A mark\n  // serializer may be `null` to indicate that marks of that type\n  // should not be serialized.\n  constructor(nodes, marks) {\n    // :: Object<(node: Node) \u2192 DOMOutputSpec>\n    // The node serialization functions.\n    this.nodes = nodes || {}\n    // :: Object<?(mark: Mark, inline: bool) \u2192 DOMOutputSpec>\n    // The mark serialization functions.\n    this.marks = marks || {}\n  }\n\n  // :: (Fragment, ?Object) \u2192 dom.DocumentFragment\n  // Serialize the content of this fragment to a DOM fragment. When\n  // not in the browser, the `document` option, containing a DOM\n  // document, should be passed so that the serializer can create\n  // nodes.\n  serializeFragment(fragment, options = {}, target) {\n    if (!target) target = doc(options).createDocumentFragment()\n\n    let top = target, active = null\n    fragment.forEach(node => {\n      if (active || node.marks.length) {\n        if (!active) active = []\n        let keep = 0, rendered = 0\n        while (keep < active.length && rendered < node.marks.length) {\n          let next = node.marks[rendered]\n          if (!this.marks[next.type.name]) { rendered++; continue }\n          if (!next.eq(active[keep]) || next.type.spec.spanning === false) break\n          keep += 2; rendered++\n        }\n        while (keep < active.length) {\n          top = active.pop()\n          active.pop()\n        }\n        while (rendered < node.marks.length) {\n          let add = node.marks[rendered++]\n          let markDOM = this.serializeMark(add, node.isInline, options)\n          if (markDOM) {\n            active.push(add, top)\n            top.appendChild(markDOM.dom)\n            top = markDOM.contentDOM || markDOM.dom\n          }\n        }\n      }\n      top.appendChild(this.serializeNode(node, options))\n    })\n\n    return target\n  }\n\n  // :: (Node, ?Object) \u2192 dom.Node\n  // Serialize this node to a DOM node. This can be useful when you\n  // need to serialize a part of a document, as opposed to the whole\n  // document. To serialize a whole document, use\n  // [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n  // its [content](#model.Node.content).\n  serializeNode(node, options = {}) {\n    let {dom, contentDOM} =\n        DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node))\n    if (contentDOM) {\n      if (node.isLeaf)\n        throw new RangeError(\"Content hole not allowed in a leaf node spec\")\n      if (options.onContent)\n        options.onContent(node, contentDOM, options)\n      else\n        this.serializeFragment(node.content, options, contentDOM)\n    }\n    return dom\n  }\n\n  serializeNodeAndMarks(node, options = {}) {\n    let dom = this.serializeNode(node, options)\n    for (let i = node.marks.length - 1; i >= 0; i--) {\n      let wrap = this.serializeMark(node.marks[i], node.isInline, options)\n      if (wrap) {\n        ;(wrap.contentDOM || wrap.dom).appendChild(dom)\n        dom = wrap.dom\n      }\n    }\n    return dom\n  }\n\n  serializeMark(mark, inline, options = {}) {\n    let toDOM = this.marks[mark.type.name]\n    return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))\n  }\n\n  // :: (dom.Document, DOMOutputSpec) \u2192 {dom: dom.Node, contentDOM: ?dom.Node}\n  // Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n  // the spec has a hole (zero) in it, `contentDOM` will point at the\n  // node with the hole.\n  static renderSpec(doc, structure, xmlNS = null) {\n    if (typeof structure == \"string\")\n      return {dom: doc.createTextNode(structure)}\n    if (structure.nodeType != null)\n      return {dom: structure}\n    if (structure.dom && structure.dom.nodeType != null)\n      return structure\n    let tagName = structure[0], space = tagName.indexOf(\" \")\n    if (space > 0) {\n      xmlNS = tagName.slice(0, space)\n      tagName = tagName.slice(space + 1)\n    }\n    let contentDOM = null, dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName)\n    let attrs = structure[1], start = 1\n    if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n      start = 2\n      for (let name in attrs) if (attrs[name] != null) {\n        let space = name.indexOf(\" \")\n        if (space > 0) dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name])\n        else dom.setAttribute(name, attrs[name])\n      }\n    }\n    for (let i = start; i < structure.length; i++) {\n      let child = structure[i]\n      if (child === 0) {\n        if (i < structure.length - 1 || i > start)\n          throw new RangeError(\"Content hole must be the only child of its parent node\")\n        return {dom, contentDOM: dom}\n      } else {\n        let {dom: inner, contentDOM: innerContent} = DOMSerializer.renderSpec(doc, child, xmlNS)\n        dom.appendChild(inner)\n        if (innerContent) {\n          if (contentDOM) throw new RangeError(\"Multiple content holes\")\n          contentDOM = innerContent\n        }\n      }\n    }\n    return {dom, contentDOM}\n  }\n\n  // :: (Schema) \u2192 DOMSerializer\n  // Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n  // properties in a schema's node and mark specs.\n  static fromSchema(schema) {\n    return schema.cached.domSerializer ||\n      (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))\n  }\n\n  // : (Schema) \u2192 Object<(node: Node) \u2192 DOMOutputSpec>\n  // Gather the serializers in a schema's node specs into an object.\n  // This can be useful as a base to build a custom serializer from.\n  static nodesFromSchema(schema) {\n    let result = gatherToDOM(schema.nodes)\n    if (!result.text) result.text = node => node.text\n    return result\n  }\n\n  // : (Schema) \u2192 Object<(mark: Mark) \u2192 DOMOutputSpec>\n  // Gather the serializers in a schema's mark specs into an object.\n  static marksFromSchema(schema) {\n    return gatherToDOM(schema.marks)\n  }\n}\n\nfunction gatherToDOM(obj) {\n  let result = {}\n  for (let name in obj) {\n    let toDOM = obj[name].spec.toDOM\n    if (toDOM) result[name] = toDOM\n  }\n  return result\n}\n\nfunction doc(options) {\n  // declare global: window\n  return options.document || window.document\n}\n"],
  "mappings": "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",
  "names": []
}
