{
  "version": 3,
  "sources": ["../../../node_modules/prosemirror-schema-list/src/schema-list.js"],
  "sourcesContent": ["import {findWrapping, liftTarget, canSplit, ReplaceAroundStep} from \"prosemirror-transform\"\nimport {Slice, Fragment, NodeRange} from \"prosemirror-model\"\n\nconst olDOM = [\"ol\", 0], ulDOM = [\"ul\", 0], liDOM = [\"li\", 0]\n\n// :: NodeSpec\n// An ordered list [node spec](#model.NodeSpec). Has a single\n// attribute, `order`, which determines the number at which the list\n// starts counting, and defaults to 1. Represented as an `<ol>`\n// element.\nexport const orderedList = {\n  attrs: {order: {default: 1}},\n  parseDOM: [{tag: \"ol\", getAttrs(dom) {\n    return {order: dom.hasAttribute(\"start\") ? +dom.getAttribute(\"start\") : 1}\n  }}],\n  toDOM(node) {\n    return node.attrs.order == 1 ? olDOM : [\"ol\", {start: node.attrs.order}, 0]\n  }\n}\n\n// :: NodeSpec\n// A bullet list node spec, represented in the DOM as `<ul>`.\nexport const bulletList = {\n  parseDOM: [{tag: \"ul\"}],\n  toDOM() { return ulDOM }\n}\n\n// :: NodeSpec\n// A list item (`<li>`) spec.\nexport const listItem = {\n  parseDOM: [{tag: \"li\"}],\n  toDOM() { return liDOM },\n  defining: true\n}\n\nfunction add(obj, props) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  for (let prop in props) copy[prop] = props[prop]\n  return copy\n}\n\n// :: (OrderedMap<NodeSpec>, string, ?string) \u2192 OrderedMap<NodeSpec>\n// Convenience function for adding list-related node types to a map\n// specifying the nodes for a schema. Adds\n// [`orderedList`](#schema-list.orderedList) as `\"ordered_list\"`,\n// [`bulletList`](#schema-list.bulletList) as `\"bullet_list\"`, and\n// [`listItem`](#schema-list.listItem) as `\"list_item\"`.\n//\n// `itemContent` determines the content expression for the list items.\n// If you want the commands defined in this module to apply to your\n// list structure, it should have a shape like `\"paragraph block*\"` or\n// `\"paragraph (ordered_list | bullet_list)*\"`. `listGroup` can be\n// given to assign a group name to the list node types, for example\n// `\"block\"`.\nexport function addListNodes(nodes, itemContent, listGroup) {\n  return nodes.append({\n    ordered_list: add(orderedList, {content: \"list_item+\", group: listGroup}),\n    bullet_list: add(bulletList, {content: \"list_item+\", group: listGroup}),\n    list_item: add(listItem, {content: itemContent})\n  })\n}\n\n// :: (NodeType, ?Object) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Returns a command function that wraps the selection in a list with\n// the given type an attributes. If `dispatch` is null, only return a\n// value to indicate whether this is possible, but don't actually\n// perform the change.\nexport function wrapInList(listType, attrs) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to), doJoin = false, outerRange = range\n    if (!range) return false\n    // This is at the top of an existing list item\n    if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {\n      // Don't do anything if this is the top of the list\n      if ($from.index(range.depth - 1) == 0) return false\n      let $insert = state.doc.resolve(range.start - 2)\n      outerRange = new NodeRange($insert, $insert, range.depth)\n      if (range.endIndex < range.parent.childCount)\n        range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth)\n      doJoin = true\n    }\n    let wrap = findWrapping(outerRange, listType, attrs, range)\n    if (!wrap) return false\n    if (dispatch) dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView())\n    return true\n  }\n}\n\nfunction doWrapInList(tr, range, wrappers, joinBefore, listType) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--)\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n\n  tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end,\n                                new Slice(content, 0, 0), wrappers.length, true))\n\n  let found = 0\n  for (let i = 0; i < wrappers.length; i++) if (wrappers[i].type == listType) found = i + 1\n  let splitDepth = wrappers.length - found\n\n  let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent\n  for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {\n    if (!first && canSplit(tr.doc, splitPos, splitDepth)) {\n      tr.split(splitPos, splitDepth)\n      splitPos += 2 * splitDepth\n    }\n    splitPos += parent.child(i).nodeSize\n  }\n  return tr\n}\n\n// :: (NodeType) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Build a command that splits a non-empty textblock at the top level\n// of a list item by also splitting that list item.\nexport function splitListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to, node} = state.selection\n    if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) return false\n    let grandParent = $from.node(-1)\n    if (grandParent.type != itemType) return false\n    if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {\n      // In an empty block. If this is a nested list, the wrapping\n      // list item should be split. Otherwise, bail out and let next\n      // command handle lifting.\n      if ($from.depth == 2 || $from.node(-3).type != itemType ||\n          $from.index(-2) != $from.node(-2).childCount - 1) return false\n      if (dispatch) {\n        let wrap = Fragment.empty, keepItem = $from.index(-1) > 0\n        // Build a fragment containing empty versions of the structure\n        // from the outer list item to the parent node of the cursor\n        for (let d = $from.depth - (keepItem ? 1 : 2); d >= $from.depth - 3; d--)\n          wrap = Fragment.from($from.node(d).copy(wrap))\n        // Add a second list item with an empty default start node\n        wrap = wrap.append(Fragment.from(itemType.createAndFill()))\n        let tr = state.tr.replace($from.before(keepItem ? null : -1), $from.after(-3), new Slice(wrap, keepItem ? 3 : 2, 2))\n        tr.setSelection(state.selection.constructor.near(tr.doc.resolve($from.pos + (keepItem ? 3 : 2))))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n    let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null\n    let tr = state.tr.delete($from.pos, $to.pos)\n    let types = nextType && [null, {type: nextType}]\n    if (!canSplit(tr.doc, $from.pos, 2, types)) return false\n    if (dispatch) dispatch(tr.split($from.pos, 2, types).scrollIntoView())\n    return true\n  }\n}\n\n// :: (NodeType) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Create a command to lift the list item around the selection up into\n// a wrapping list.\nexport function liftListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type == itemType)\n    if (!range) return false\n    if (!dispatch) return true\n    if ($from.node(range.depth - 1).type == itemType) // Inside a parent list\n      return liftToOuterList(state, dispatch, itemType, range)\n    else // Outer list node\n      return liftOutOfList(state, dispatch, range)\n  }\n}\n\nfunction liftToOuterList(state, dispatch, itemType, range) {\n  let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth)\n  if (end < endOfList) {\n    // There are siblings after the lifted items, which must become\n    // children of the last item\n    tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList,\n                                  new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true))\n    range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth)\n  }\n  dispatch(tr.lift(range, liftTarget(range)).scrollIntoView())\n  return true\n}\n\nfunction liftOutOfList(state, dispatch, range) {\n  let tr = state.tr, list = range.parent\n  // Merge the list items into a single big item\n  for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {\n    pos -= list.child(i).nodeSize\n    tr.delete(pos - 1, pos + 1)\n  }\n  let $start = tr.doc.resolve(range.start), item = $start.nodeAfter\n  let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount\n  let parent = $start.node(-1), indexBefore = $start.index(-1)\n  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1,\n                         item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))\n    return false\n  let start = $start.pos, end = start + item.nodeSize\n  // Strip off the surrounding list. At the sides where we're not at\n  // the end of the list, the existing list is closed. At sides where\n  // this is the end, it is overwritten to its end.\n  tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1,\n                                new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty)))\n                                          .append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))),\n                                          atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1))\n  dispatch(tr.scrollIntoView())\n  return true\n}\n\n// :: (NodeType) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Create a command to sink the list item around the selection down\n// into an inner list.\nexport function sinkListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type == itemType)\n    if (!range) return false\n    let startIndex = range.startIndex\n    if (startIndex == 0) return false\n    let parent = range.parent, nodeBefore = parent.child(startIndex - 1)\n    if (nodeBefore.type != itemType) return false\n\n    if (dispatch) {\n      let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type\n      let inner = Fragment.from(nestedBefore ? itemType.create() : null)\n      let slice = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))),\n                            nestedBefore ? 3 : 1, 0)\n      let before = range.start, after = range.end\n      dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after,\n                                                   before, after, slice, 1, true))\n               .scrollIntoView())\n    }\n    return true\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
